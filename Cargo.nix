
# This file was @generated by crate2nix 0.10.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? if buildRustCrate != null
    then lib.warn "crate2nix: Passing `buildRustCrate` as argument to Cargo.nix is deprecated. If you don't customize `buildRustCrate`, replace `callPackage ./Cargo.nix {}` by `import ./Cargo.nix { inherit pkgs; }`, and if you need to customize `buildRustCrate`, use `buildRustCrateForPkgs` instead." (_: buildRustCrate)
    else pkgs: pkgs.buildRustCrate
  # Deprecated
, buildRustCrate ? null
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bencode" = rec {
      packageId = "bencode";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bencode";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bin-str" = rec {
      packageId = "bin-str";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bin-str";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "dht" = rec {
      packageId = "dht";
      build = internal.buildRustCrateWithFeatures {
        packageId = "dht";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "dht-example" = rec {
      packageId = "dht-example";
      build = internal.buildRustCrateWithFeatures {
        packageId = "dht-example";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "dht-traffic-stats" = rec {
      packageId = "dht-traffic-stats";
      build = internal.buildRustCrateWithFeatures {
        packageId = "dht-traffic-stats";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "dht-traffic-stealer" = rec {
      packageId = "dht-traffic-stealer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "dht-traffic-stealer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "heap-dist-key" = rec {
      packageId = "heap-dist-key";
      build = internal.buildRustCrateWithFeatures {
        packageId = "heap-dist-key";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "iresult" = rec {
      packageId = "iresult";
      build = internal.buildRustCrateWithFeatures {
        packageId = "iresult";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "magnetite" = rec {
      packageId = "magnetite";
      build = internal.buildRustCrateWithFeatures {
        packageId = "magnetite";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "magnetite-common" = rec {
      packageId = "magnetite-common";
      build = internal.buildRustCrateWithFeatures {
        packageId = "magnetite-common";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "magnetite-tracker" = rec {
      packageId = "magnetite-tracker";
      build = internal.buildRustCrateWithFeatures {
        packageId = "magnetite-tracker";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "magnetite-tracker-lib" = rec {
      packageId = "magnetite-tracker-lib";
      build = internal.buildRustCrateWithFeatures {
        packageId = "magnetite-tracker-lib";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "scraper" = rec {
      packageId = "scraper";
      build = internal.buildRustCrateWithFeatures {
        packageId = "scraper";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.19.0";
        edition = "2015";
        sha256 = "15ywmr5wx22q69ffnn79qp65ir5p1x0k2q06plcpv6v74c5xcvx7";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "object" = [ "dep:object" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.2.19";
        edition = "2018";
        sha256 = "1yzdrxaq99zfy0niq5i3cz5jv569s3s6z5q2cxcg08y6prh1nri9";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random";
            packageId = "const-random";
            optional = true;
          }
        ];
        features = {
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "compile-time-rng" ];
        };
        resolvedDefaultFeatures = [ "compile-time-rng" "const-random" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.20";
        edition = "2018";
        sha256 = "1b3if3nav4qzgjz9bf75b2cv2h2yisrqfs0np70i38kgz4cn94yc";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.70";
        edition = "2018";
        sha256 = "1r1py8nk0xj6h21jgww8f0zazdvjimbnl1hiacj8i3cz1xgcxs3x";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1a3vg89xc7r2166mc25ciw3rbqfxjylfbjwlq4wrfy433wc5mgns";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        features = {
        };
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.64";
        edition = "2018";
        sha256 = "18j7v85y2df62c1ylrzvgrs0afmzvnrdhwnf50hh8g4cpblzrmqw";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "atomic-shim" = rec {
        crateName = "atomic-shim";
        version = "0.1.0";
        edition = "2018";
        sha256 = "16yzir8xq6s6qzknkah6vl84i2smjn0q63lp1nis2yb72p3xl3yj";
        authors = [
          "Bruno Tavares <connect+github@bltavares.com>"
        ];
        dependencies = [
          {
            name = "crossbeam";
            packageId = "crossbeam";
            optional = true;
          }
          {
            name = "crossbeam";
            packageId = "crossbeam";
            target = { target, features }: (target."arch" == "mips");
          }
          {
            name = "crossbeam";
            packageId = "crossbeam";
            target = { target, features }: (target."arch" == "powerpc");
          }
        ];
        features = {
          "crossbeam" = [ "dep:crossbeam" ];
          "mutex" = [ "crossbeam" ];
        };
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.1.19";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];

      };
      "autocfg 0.1.8" = rec {
        crateName = "autocfg";
        version = "0.1.8";
        edition = "2015";
        sha256 = "0y4vw4l4izdxq1v0rrhvmlbqvalrqrmk60v1z0dqlgnlbzkl7phd";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];

      };
      "autocfg 1.1.0" = rec {
        crateName = "autocfg";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1ylp3cb47ylzabimazvbz9ms6ap784zhb6syaz6c1jqpmcmq0s6l";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "axum" = rec {
        crateName = "axum";
        version = "0.6.7";
        edition = "2021";
        sha256 = "148m1ra1cbrdf1733901mgdvbasbr6mlr1kldr1g5p3hh8i9rdrg";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.5";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            features = [ "stream" ];
          }
          {
            name = "itoa";
            packageId = "itoa 1.0.5";
          }
          {
            name = "matchit";
            packageId = "matchit";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "tower";
            packageId = "tower";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "util" "map-response-body" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "util" "timeout" "limit" "load-shed" "steer" "filter" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            features = [ "full" ];
          }
        ];
        features = {
          "__private_docs" = [ "tower/full" "tower-http/full" ];
          "default" = [ "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" ];
          "form" = [ "dep:serde_urlencoded" ];
          "headers" = [ "dep:headers" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "json" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [ "dep:tokio" "hyper/server" "hyper/tcp" "hyper/runtime" "tower/make" ];
          "tower-log" = [ "tower/log" ];
          "ws" = [ "tokio" "dep:tokio-tungstenite" "dep:sha1" "dep:base64" ];
        };
      };
      "axum-core" = rec {
        crateName = "axum-core";
        version = "0.3.2";
        edition = "2021";
        sha256 = "0d4d304j18raiziy3xqp23km14cck8429a7i635vmzvn2rk3xbhw";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.5";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.67";
        edition = "2018";
        sha256 = "1jk48laqafvbyc0mn1v0didk307qc0zji3z5jcq2lpqqdmnkfg93";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "macho" "pe" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "rustc-serialize" = [ "dep:rustc-serialize" ];
          "serde" = [ "dep:serde" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.13.1" = rec {
        crateName = "base64";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1s494mqmzjb766fy1kqlccgfg2sdcjb6hzbvzqv2jw65fdi5h6wy";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.21.0" = rec {
        crateName = "base64";
        version = "0.21.0";
        edition = "2021";
        sha256 = "0sidjip5b33sr6w7kasfj9qxpbda41nw0x4gjjk55g55a6mdv954";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bencode" = rec {
        crateName = "bencode";
        version = "0.0.1";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./bencode; };
        authors = [
          "Stacey Ell <stacey.ell@gmail.com>"
        ];
        dependencies = [
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "iresult";
            packageId = "iresult";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "afl" "default" ];
      };
      "bin-str" = rec {
        crateName = "bin-str";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./bin-str; };

      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitmaps" = rec {
        crateName = "bitmaps";
        version = "2.1.0";
        edition = "2018";
        sha256 = "18k4mcwxl96yvii5kcljkpb8pg5j4jj1zbsdn26nsx4r83846403";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block-buffer 0.10.3" = rec {
        crateName = "block-buffer";
        version = "0.10.3";
        edition = "2018";
        sha256 = "0zmy5vjwa6pbrhlgk94jg2pz08w5dd9nw2j7jfwrg3s96w3y5k39";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.6";
          }
        ];

      };
      "block-buffer 0.7.3" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.12.4";
          }
        ];

      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1xbkmysiz23vimd17rnsjpw9bgjxipwfslwyygqlkx4in3dxwygs";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];

      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.12.0";
        edition = "2021";
        sha256 = "0damxqdgqqzp3zyfwvbrg5hzx39kqgxnxl3yyq3kk4ald0jiw9hd";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.4.3";
        edition = "2018";
        sha256 = "0456lv9xi1a5bcm32arknf33ikv76p3fr9yzki4lb2897p2qkh8l";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes 0.5.6" = rec {
        crateName = "bytes";
        version = "0.5.6";
        edition = "2018";
        sha256 = "0f5s7xq6qzmdh22ygsy8v0sp02m51y0radvq4i4y8cizy1lfqk0f";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes 1.4.0" = rec {
        crateName = "bytes";
        version = "1.4.0";
        edition = "2018";
        sha256 = "1gkh3fk4fm9xv5znlib723h5md5sxsvbd5113sbxff6g1lmgvcl9";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.79";
        edition = "2018";
        crateBin = [];
        sha256 = "07x93b8zbf3xc2dggdd460xlk1wg8lxm6yflwddxj8b15030klsh";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "jobserver" = [ "dep:jobserver" ];
          "parallel" = [ "jobserver" ];
        };
      };
      "cfg-if 0.1.10" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg-if 1.0.0" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.23";
        edition = "2018";
        sha256 = "07s1hnrw8zpmgf76fj5sx0dzxny5p1xs703p0li4n8h1xpcs7c0n";
        dependencies = [
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            features = [ "fallback" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((target."arch" == "wasm32") && (!((target."os" == "emscripten") || (target."os" == "wasi"))));
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: ((target."arch" == "wasm32") && (!((target."os" == "emscripten") || (target."os" == "wasi"))));
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "std" "minwinbase" "minwindef" "timezoneapi" ];
          }
        ];
        features = {
          "__internal_bench" = [ "criterion" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "std" "winapi" "iana-time-zone" ];
          "criterion" = [ "dep:criterion" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "oldtime" = [ "time" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-serialize" = [ "dep:rustc-serialize" ];
          "serde" = [ "dep:serde" ];
          "time" = [ "dep:time" ];
          "unstable-locales" = [ "pure-rust-locales" "alloc" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "iana-time-zone" "js-sys" "oldtime" "std" "time" "wasm-bindgen" "wasmbind" "winapi" ];
      };
      "clap 2.34.0" = rec {
        crateName = "clap";
        version = "2.34.0";
        edition = "2018";
        sha256 = "071q5d8jfwbazi6zhik9xwpacx5i6kb2vkzy060vhf0c3120aqd0";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "textwrap";
            packageId = "textwrap 0.11.0";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "ansi_term" = [ "dep:ansi_term" ];
          "atty" = [ "dep:atty" ];
          "clippy" = [ "dep:clippy" ];
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
          "term_size" = [ "dep:term_size" ];
          "vec_map" = [ "dep:vec_map" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
          "yaml-rust" = [ "dep:yaml-rust" ];
        };
      };
      "clap 3.2.23" = rec {
        crateName = "clap";
        version = "3.2.23";
        edition = "2021";
        crateBin = [];
        sha256 = "19bkwkj49ha7mlip0gxsqb9xmd3jpr7ghvcx1hkx6icqrd2mqrbi";
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap 0.16.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "atty" = [ "dep:atty" ];
          "backtrace" = [ "dep:backtrace" ];
          "cargo" = [ "once_cell" ];
          "clap_derive" = [ "dep:clap_derive" ];
          "color" = [ "atty" "termcolor" ];
          "debug" = [ "clap_derive/debug" "backtrace" ];
          "default" = [ "std" "color" "suggestions" ];
          "deprecated" = [ "clap_derive/deprecated" ];
          "derive" = [ "clap_derive" "once_cell" ];
          "once_cell" = [ "dep:once_cell" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "indexmap/std" ];
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
          "termcolor" = [ "dep:termcolor" ];
          "terminal_size" = [ "dep:terminal_size" ];
          "unicase" = [ "dep:unicase" ];
          "unicode" = [ "textwrap/unicode-width" "unicase" ];
          "unstable-doc" = [ "derive" "cargo" "wrap_help" "yaml" "env" "unicode" "regex" "unstable-replace" "unstable-grouped" ];
          "unstable-v4" = [ "clap_derive/unstable-v4" "deprecated" ];
          "wrap_help" = [ "terminal_size" "textwrap/terminal_size" ];
          "yaml" = [ "yaml-rust" ];
          "yaml-rust" = [ "dep:yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "atty" "color" "default" "std" "strsim" "suggestions" "termcolor" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1ib1a9v55ybnaws11l63az0jgz5xiy24jkdgsmyl7grcm3sz4l18";
        dependencies = [
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes";
            usesDefaultFeatures = false;
            features = [ "raw_os_str" ];
          }
        ];

      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "bitflags" = [ "dep:bitflags" ];
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "codespan-reporting" = rec {
        crateName = "codespan-reporting";
        version = "0.11.1";
        edition = "2018";
        sha256 = "0vkfay0aqk73d33kh79k1kqxx06ka22894xhqi89crnc6c6jff1m";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" "serde/rc" ];
        };
      };
      "const-random" = rec {
        crateName = "const-random";
        version = "0.1.15";
        edition = "2018";
        sha256 = "13n15ji2jpkkymd94wjgfknbhgaz916b1gw2vvhyfv5d5rvpm2in";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random-macro";
            packageId = "const-random-macro";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
        ];

      };
      "const-random-macro" = rec {
        crateName = "const-random-macro";
        version = "0.1.15";
        edition = "2018";
        sha256 = "1nqdbkh0zwvh82ypxyzhg82sgq5nvb204pyz22r2sa52qfrnlzcx";
        procMacro = true;
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.8";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "race" "alloc" ];
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "shake" ];
          }
        ];

      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.3";
        edition = "2015";
        sha256 = "0ii1ihpjb30fk38gdikm5wqlkmyr8k46fh4k2r8sagz5dng7ljhr";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.3";
        edition = "2015";
        sha256 = "1p5r2wckarkpkyc4z83q08dwpvcafrb1h6fxfa3qnikh8szww9sq";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "08535izlz4kx8z1kkcp0gy80gqk7k19dqiiysj6r5994bsyrgn98";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-apple-darwin");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."arch" == "aarch64") && (target."os" == "linux"));
          }
        ];

      };
      "crossbeam" = rec {
        crateName = "crossbeam";
        version = "0.7.3";
        edition = "2015";
        sha256 = "13kzn2d49n2qn5q42y2dj48kyv6aln2d9smq8x9n675l3zzknck9";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel 0.4.4";
            optional = true;
          }
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
            optional = true;
          }
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
            optional = true;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "crossbeam-epoch/alloc" "crossbeam-utils/alloc" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "crossbeam-deque" = [ "dep:crossbeam-deque" ];
          "crossbeam-queue" = [ "dep:crossbeam-queue" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-epoch/nightly" "crossbeam-utils/nightly" ];
          "std" = [ "crossbeam-channel" "crossbeam-deque" "crossbeam-epoch/std" "crossbeam-queue" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-channel" "crossbeam-deque" "crossbeam-queue" "default" "std" ];
      };
      "crossbeam-channel 0.4.4" = rec {
        crateName = "crossbeam-channel";
        version = "0.4.4";
        edition = "2015";
        sha256 = "11zvmp8p94vaqp4xyhzymw8xndnpwq12x5qgvxkway7lprygwlxi";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];

      };
      "crossbeam-channel 0.5.6" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.6";
        edition = "2018";
        sha256 = "08f5f043rljl82a06d1inda6nl2b030s7yfqp31ps8w8mzfh9pf2";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.8.14";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "crossbeam-utils" = [ "dep:crossbeam-utils" ];
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-utils" "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.7.4";
        edition = "2015";
        sha256 = "1v99xcdjk4zixvxnq7pssip670mlyhw1ma3qc88ca11jxnfz43y2";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];

      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1knsf0zz7rgzxn0nwz5gajjcrivxpw3zrdcp946gdhdgr9sd53h5";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "crossbeam-utils/std" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0w15z68nz3ac4f2s4djhwha8vmlwsh9dlfrmsl4x84y2ah5acjvp";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            usesDefaultFeatures = false;
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils 0.7.2" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.2";
        edition = "2015";
        sha256 = "1a31wbrda1320gj2a6az1lin2d34xfc3xf88da4c17qy5lxcgiy3";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-utils 0.8.14" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.14";
        edition = "2018";
        sha256 = "17wjbnlj4whbdvc1syk2gfy8maqx01sg2hmqpdnjh9l7g7x6ddsg";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.6";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ctor" = rec {
        crateName = "ctor";
        version = "0.1.26";
        edition = "2018";
        sha256 = "15m0wqhv12p25xkxz5dxvg23r7a6bkh7p8zi1cdhgswjhdl028vd";
        procMacro = true;
        authors = [
          "Matt Mastracci <matthew@mastracci.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "proc-macro" ];
          }
        ];

      };
      "cxx" = rec {
        crateName = "cxx";
        version = "1.0.91";
        edition = "2018";
        sha256 = "0qhxmwf3zbgjmi3073ccc33jpsqa1pcvs9bynn1s99v5fs74ilw6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "cxxbridge-macro";
            packageId = "cxxbridge-macro";
          }
          {
            name = "link-cplusplus";
            packageId = "link-cplusplus";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "cxxbridge-flags";
            packageId = "cxxbridge-flags";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "c++14" = [ "cxxbridge-flags/c++14" ];
          "c++17" = [ "cxxbridge-flags/c++17" ];
          "c++20" = [ "cxxbridge-flags/c++20" ];
          "default" = [ "std" "cxxbridge-flags/default" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "cxx-build" = rec {
        crateName = "cxx-build";
        version = "1.0.91";
        edition = "2018";
        sha256 = "1456bnn9yikf071kbdxqxdzpd2vkk5yxa57v3nl42fh5d83azz28";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "scratch";
            packageId = "scratch";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" "clone-impls" "full" ];
          }
        ];
        features = {
          "parallel" = [ "cc/parallel" ];
        };
      };
      "cxxbridge-flags" = rec {
        crateName = "cxxbridge-flags";
        version = "1.0.91";
        edition = "2018";
        sha256 = "1gvrwi7ghbl76zpnhyr2mc9q1r72z7hq1bq3av52ka0pnyw9ivx2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cxxbridge-macro" = rec {
        crateName = "cxxbridge-macro";
        version = "1.0.91";
        edition = "2018";
        sha256 = "14lqs4lgnxpzn4pz36c5lfaj4r2wr5b7ikz5aqv49656g5cnhv08";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
          "clang-ast" = [ "dep:clang-ast" ];
          "experimental-enum-variants-from-header" = [ "clang-ast" "flate2" "memmap" "serde" "serde_json" ];
          "flate2" = [ "dep:flate2" ];
          "memmap" = [ "dep:memmap" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
        };
      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "5.4.0";
        edition = "2018";
        sha256 = "1p2f5kr5hy7h4w3y2abprnxsaq36r685zfx1s8v0nfw2vbgpcw4h";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api 0.4.9";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.7";
          }
        ];
        features = {
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "dht" = rec {
        crateName = "dht";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./dht; };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "heap-dist-key";
            packageId = "heap-dist-key";
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
            features = [ "serde" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "sync" "rt" "net" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber 0.3.16";
            features = [ "smallvec" "fmt" "ansi" "tracing-log" "std" "json" ];
          }
        ];

      };
      "dht-example" = rec {
        crateName = "dht-example";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          { name = "dht-example"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./dht/dht-example; };
        dependencies = [
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "clap";
            packageId = "clap 2.34.0";
            usesDefaultFeatures = false;
          }
          {
            name = "dht";
            packageId = "dht";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper";
            packageId = "hyper 1.0.0-rc.1";
            features = [ "full" ];
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
            features = [ "serde" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "full" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber 0.3.16";
            features = [ "smallvec" "fmt" "ansi" "tracing-log" "std" "json" ];
          }
        ];

      };
      "dht-traffic-stats" = rec {
        crateName = "dht-traffic-stats";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          { name = "dht-traffic-stats"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./dht/dht-traffic-stats; };
        dependencies = [
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "dht";
            packageId = "dht";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
          {
            name = "packet";
            packageId = "packet";
          }
          {
            name = "pcap";
            packageId = "pcap";
          }
        ];

      };
      "dht-traffic-stealer" = rec {
        crateName = "dht-traffic-stealer";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          { name = "dht-traffic-stealer"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./dht/dht-traffic-stealer; };
        dependencies = [
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "dht";
            packageId = "dht";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
          {
            name = "packet";
            packageId = "packet";
          }
          {
            name = "pcap";
            packageId = "pcap";
          }
        ];

      };
      "digest 0.10.6" = rec {
        crateName = "digest";
        version = "0.10.6";
        edition = "2018";
        sha256 = "0vz74785s96g727vg37iwkjvbkcfzp093j49ihhyf8sh9s7kfs41";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.3";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "core-api" "default" "std" ];
      };
      "digest 0.8.1" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.12.4";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.8.1";
        edition = "2018";
        sha256 = "14bdy4qsxlfnm4626z4shwaiffi8l5krzkn7ykki1jgqzsrapjkz";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lx2s5nk96xx4i3m4zc4ghqgi8kb07dsnyiv8jk2clhax42dxz5a";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "atty" = [ "dep:atty" ];
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
          "termcolor" = [ "dep:termcolor" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.2.8";
        edition = "2015";
        sha256 = "18cnqgk8r6lq1n5cfy3bryiyz9zkqr10dxj49sa3fkzfamih8fgn";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "errno-dragonfly";
            packageId = "errno-dragonfly";
            target = { target, features }: (target."os" == "dragonfly");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "errhandlingapi" "minwindef" "ntdef" "winbase" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "errno-dragonfly" = rec {
        crateName = "errno-dragonfly";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1grrmcm6q8512hkq5yzch3yv8wafflc2apbmsaabiyk44yqz2s5a";
        authors = [
          "Michael Neumann <mneumann@ntecs.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.8";
        edition = "2015";
        sha256 = "11jg1wmbkijrs6bk9fqnbrm9zf0850whnqpgnxyswbn0dk8rnbnk";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "failure_derive" = [ "dep:failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1936adqqk080439kx2bjf1bds7h89sg6wcif4jw0syndcv3s6kda";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];

      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "1.9.0";
        edition = "2018";
        sha256 = "1gh12m56265ihdbzh46bhh0jf74i197wm51jg1cw75q7ggi96475";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "wasi")));
          }
        ];
        devDependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = {target, features}: ((target."arch" == "wasm32") && (!(target."os" == "wasi")));
            features = [ "wasm-bindgen" ];
          }
        ];

      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];

      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];

      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];

      };
      "fuse" = rec {
        crateName = "fuse";
        version = "0.4.0-dev";
        edition = "2018";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/zargony/fuse-rs";
          rev = "39fde4a5c47ce370d228ac190f950bd835db7f47";
          sha256 = "06bb2s86q9f7nxa581h8vpgnadlgjg7zg846cmxzx8wj9rd1y6zs";
        };
        authors = [
          "Andreas Neuhaus <zargony@zargony.com>"
        ];
        dependencies = [
          {
            name = "fuse-abi";
            packageId = "fuse-abi";
          }
          {
            name = "fuse-sys";
            packageId = "fuse-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thread-scoped";
            packageId = "thread-scoped";
          }
        ];

      };
      "fuse-abi" = rec {
        crateName = "fuse-abi";
        version = "0.4.0-dev";
        edition = "2018";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/zargony/fuse-rs";
          rev = "39fde4a5c47ce370d228ac190f950bd835db7f47";
          sha256 = "06bb2s86q9f7nxa581h8vpgnadlgjg7zg846cmxzx8wj9rd1y6zs";
        };
        authors = [
          "Andreas Neuhaus <zargony@zargony.com>"
        ];
        features = {
          "abi-7-10" = [ "abi-7-9" ];
          "abi-7-11" = [ "abi-7-10" ];
          "abi-7-12" = [ "abi-7-11" ];
          "abi-7-13" = [ "abi-7-12" ];
          "abi-7-14" = [ "abi-7-13" ];
          "abi-7-15" = [ "abi-7-14" ];
          "abi-7-16" = [ "abi-7-15" ];
          "abi-7-17" = [ "abi-7-16" ];
          "abi-7-18" = [ "abi-7-17" ];
          "abi-7-19" = [ "abi-7-18" ];
        };
      };
      "fuse-sys" = rec {
        crateName = "fuse-sys";
        version = "0.4.0-dev";
        edition = "2018";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/zargony/fuse-rs";
          rev = "39fde4a5c47ce370d228ac190f950bd835db7f47";
          sha256 = "06bb2s86q9f7nxa581h8vpgnadlgjg7zg846cmxzx8wj9rd1y6zs";
        };
        authors = [
          "Andreas Neuhaus <zargony@zargony.com>"
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.26";
        edition = "2018";
        sha256 = "115z5bqihd2jq75s8n7jxy4k83kpv67vhic4snch6d7h1wmpkqhk";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1xadcvj4hi6278hq6i0vnrsa231fyiylh2n03rx7d2ch79k1flrf";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.26";
        edition = "2018";
        sha256 = "02467z5mv0219hkrgmpvsb3h7vb8pg31s1j901h7vxg11x6zz47c";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.26";
        edition = "2018";
        sha256 = "03mm37yv235i2ifjfaacw5cl8cmiyirj8ap3d64fr5xblqshmpp8";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.26";
        edition = "2018";
        sha256 = "0cc5s3qdgls25rlm3zpdf9fdk6gwmfp0fiiph39b5bmjdwdkgf5z";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.26";
        edition = "2018";
        sha256 = "0w3ahy69varlfw57rb2pag7jwngy771vvzmcag7mlfx3gpw3m9wm";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.26";
        edition = "2018";
        sha256 = "0r43djzf0caz89c724ishpzxy59y6nw7ykfvh1nd9kz8nc5q447k";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.26";
        edition = "2018";
        sha256 = "0rk3jg6lri1rrn03ns89cmw8lircbaf2i2d4mr10zc8hyqdrmxyw";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.26";
        edition = "2018";
        sha256 = "1lbvdf6hq62yczd87glm6ih8h5qkagsl7xdiwhmqvwzymkins7cw";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" ];
      };
      "generic-array 0.12.4" = rec {
        crateName = "generic-array";
        version = "0.12.4";
        edition = "2015";
        sha256 = "1gfpay78vijl9vrwl1k9v7fbvbhkhcmnrk4kfg9l6x24y4s9zpzz";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "generic-array 0.14.6" = rec {
        crateName = "generic-array";
        version = "0.14.6";
        edition = "2015";
        sha256 = "1fgi07v268jd0mr6xc42rjbq0wzl8ngsgp5b8wj33wwpfaa9xx5z";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js-sys" = [ "dep:js-sys" ];
          "log" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "stdweb" = [ "dep:stdweb" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom 0.2.8" = rec {
        crateName = "getrandom";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0cbb766pcyi7sws0fnp1pxkz0nhiya0ckallq502bxmq49mfnnn0";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.27.2";
        edition = "2018";
        sha256 = "1d5v6jjchf4872jynjsg5ni4vankm1341bas8qindygb6g9962md";
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "write" "std" "fallible-iterator" "endian-reader" ];
          "endian-reader" = [ "read" "stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "indexmap" = [ "dep:indexmap" ];
          "read" = [ "read-core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" ];
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
          "std" = [ "fallible-iterator/std" "stable_deref_trait/std" ];
          "write" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "h2 0.2.7" = rec {
        crateName = "h2";
        version = "0.2.7";
        edition = "2018";
        sha256 = "0dd5jyxmmy88pdmvag7n41k9z1qs6sliagcyx4jss5292byjhisy";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.3.1";
            features = [ "codec" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" "log" ];
          }
          {
            name = "tracing-futures";
            packageId = "tracing-futures";
            usesDefaultFeatures = false;
            features = [ "std-future" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "dns" "macros" "rt-core" "sync" "tcp" ];
          }
        ];
        features = {
        };
      };
      "h2 0.3.15" = rec {
        crateName = "h2";
        version = "0.3.15";
        edition = "2018";
        sha256 = "1x6h3pqi4gzgcl6xdfpjmbm0mkh2mckgav4in9b54dfskny2k7sz";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.7";
            features = [ "codec" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.6.3" = rec {
        crateName = "hashbrown";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1bbf9k46v57zi41m6hjwn83rjldyipv5zwxmdsa7a9c1rb876q4f";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.8";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "ahash-compile-time-rng" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "ahash-compile-time-rng" "default" "inline-more" ];
      };
      "hdrhistogram" = rec {
        crateName = "hdrhistogram";
        version = "6.3.4";
        edition = "2018";
        sha256 = "17dqk0rp8kimcd8wr542i8cny91fkclw7a2xzszar95wrpmk3lq8";
        authors = [
          "Jon Gjengset <jon@thesquareplanet.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        features = {
          "base64" = [ "dep:base64" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "serialization" "sync" ];
          "flate2" = [ "dep:flate2" ];
          "nom" = [ "dep:nom" ];
          "serialization" = [ "flate2" "nom" "base64" ];
          "sync" = [ "crossbeam-channel" ];
        };
      };
      "headers" = rec {
        crateName = "headers";
        version = "0.3.8";
        edition = "2015";
        sha256 = "11258p6q2md68sfhmqrgrx23vjiapqcbxffh1hz223awivdp5qzk";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "headers-core";
            packageId = "headers-core";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httpdate";
            packageId = "httpdate 1.0.2";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
        features = {
        };
      };
      "headers-core" = rec {
        crateName = "headers-core";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0ab469xfpd411mc3dhmjhmzrhqikzyj8a17jn5bkj9zfpy0n9xp7";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http";
          }
        ];

      };
      "heap-dist-key" = rec {
        crateName = "heap-dist-key";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./heap-dist-key; };

      };
      "heck" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.1.19" = rec {
        crateName = "hermit-abi";
        version = "0.1.19";
        edition = "2018";
        sha256 = "0cxcm8093nf5fyn114w8vxbrbcyvv91d4015rdnlgfll7cs6gd32";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.2.6" = rec {
        crateName = "hermit-abi";
        version = "0.2.6";
        edition = "2021";
        sha256 = "1iz439yz9qzk3rh9pqx2rz5c4107v3qbd7bppfsbzb1mzr02clgf";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "http" = rec {
        crateName = "http";
        version = "0.2.9";
        edition = "2018";
        sha256 = "10j4jjpngaymxjvi92hllr2y6acr09pq61cvzxd44qzvkb4zyvmx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa 1.0.5";
          }
        ];

      };
      "http-body 0.3.1" = rec {
        crateName = "http-body";
        version = "0.3.1";
        edition = "2018";
        sha256 = "06qi0ni45lb92w3ml260c0bxbq5zd4snjmz0a9k69xq6021zzm8k";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "http";
            packageId = "http";
          }
        ];

      };
      "http-body 0.4.5" = rec {
        crateName = "http-body";
        version = "0.4.5";
        edition = "2018";
        sha256 = "1l967qwwlvhp198xdrnc0p5d7jwfcp6q2lm510j6zqw4s4b8zwym";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
        ];

      };
      "http-body 1.0.0-rc1" = rec {
        crateName = "http-body";
        version = "1.0.0-rc1";
        edition = "2018";
        sha256 = "1w418xs9hgdj8cjm0d3262ksvhsl1xg9yy7axq95da55cd78hf7h";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "http";
            packageId = "http";
          }
        ];

      };
      "http-range-header" = rec {
        crateName = "http-range-header";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0aas8c5dagfhcqpmqq9xw6a8nkl3lfg4g4mpddvyz1cj1bnqxzhb";
        features = {
        };
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.8.0";
        edition = "2018";
        sha256 = "010rrfahm1jss3p022fqf3j3jmm72vhn4iqhykahb9ynpaag75yq";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "httpdate 0.3.2" = rec {
        crateName = "httpdate";
        version = "0.3.2";
        edition = "2015";
        sha256 = "0izbd3sf0625wm4rrfv85xa4xa8j4n1ldxhwlkgff4cm6rh4sjs9";
        authors = [
          "Pyfisch <pyfisch@gmail.com>"
        ];
        features = {
        };
      };
      "httpdate 1.0.2" = rec {
        crateName = "httpdate";
        version = "1.0.2";
        edition = "2018";
        sha256 = "08bln7b1ibdw26gl8h4dr6rlybvlkyhlha309xbh9ghxh9nf78f4";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];

      };
      "hwaddr" = rec {
        crateName = "hwaddr";
        version = "0.1.7";
        edition = "2018";
        sha256 = "0ny8jalhl30k9555zi2mg4zfg9c3r1q0d7d2gzlg8f23kqx46574";
        authors = [
          "meh. <meh@schizofreni.co>"
        ];
        dependencies = [
          {
            name = "phf";
            packageId = "phf";
          }
        ];
        features = {
          "database" = [ "smol" "reqwest" "url" "regex" "phf_codegen" ];
          "phf_codegen" = [ "dep:phf_codegen" ];
          "regex" = [ "dep:regex" ];
          "reqwest" = [ "dep:reqwest" ];
          "smol" = [ "dep:smol" ];
          "url" = [ "dep:url" ];
        };
      };
      "hyper 0.13.10" = rec {
        crateName = "hyper";
        version = "0.13.10";
        edition = "2018";
        sha256 = "1fwndqc3glvzg7vna3aaf5pdkkdm3422ayc6z393w2krcmq1avwa";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.2.7";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.3.1";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate 0.3.2";
          }
          {
            name = "itoa";
            packageId = "itoa 0.4.8";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "socket2";
            packageId = "socket2 0.3.19";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "log" "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "fs" "macros" "io-std" "rt-util" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "default" = [ "runtime" "stream" ];
          "runtime" = [ "tcp" "tokio/rt-core" ];
          "socket2" = [ "dep:socket2" ];
          "tcp" = [ "socket2" "tokio/blocking" "tokio/tcp" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "default" "runtime" "socket2" "stream" "tcp" ];
      };
      "hyper 0.14.24" = rec {
        crateName = "hyper";
        version = "0.14.24";
        edition = "2018";
        sha256 = "0k0nbykigwb9gmbqb13dyjdq7izc624j8ymaa21xns0bz9r160ay";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.15";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.5";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate 1.0.2";
          }
          {
            name = "itoa";
            packageId = "itoa 1.0.5";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "socket2";
            packageId = "socket2 0.4.7";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "sync" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "fs" "macros" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "ffi" = [ "libc" ];
          "full" = [ "client" "http1" "http2" "server" "stream" "runtime" ];
          "h2" = [ "dep:h2" ];
          "http2" = [ "h2" ];
          "libc" = [ "dep:libc" ];
          "runtime" = [ "tcp" "tokio/rt" "tokio/time" ];
          "socket2" = [ "dep:socket2" ];
          "tcp" = [ "socket2" "tokio/net" "tokio/rt" "tokio/time" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "full" "h2" "http1" "http2" "runtime" "server" "socket2" "stream" "tcp" ];
      };
      "hyper 1.0.0-rc.1" = rec {
        crateName = "hyper";
        version = "1.0.0-rc.1";
        edition = "2018";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/hyperium/hyper";
          rev = "9f47576cab1b5db0a51416a4859df522c26fac35";
          sha256 = "1598vij8wpb7la8j7rl8v3jdpbwvgiqd7vyafjzwmsasigr15k0q";
        };
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.15";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 1.0.0-rc1";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "httpdate";
            packageId = "httpdate 1.0.2";
          }
          {
            name = "itoa";
            packageId = "itoa 1.0.5";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "want";
            packageId = "want";
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "ffi" = [ "libc" "http-body-util" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "h2" = [ "dep:h2" ];
          "http-body-util" = [ "dep:http-body-util" ];
          "http2" = [ "h2" ];
          "libc" = [ "dep:libc" ];
          "socket2" = [ "dep:socket2" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "full" "h2" "http1" "http2" "server" ];
      };
      "hyper-timeout" = rec {
        crateName = "hyper-timeout";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1c8k3g8k2yh1gxvsx9p7amkimgxhl9kafwpj7jyf8ywc5r45ifdv";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            features = [ "client" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
          }
          {
            name = "tokio-io-timeout";
            packageId = "tokio-io-timeout";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            features = [ "client" "http1" "tcp" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "io-std" "io-util" "macros" ];
          }
        ];

      };
      "hyper-tls" = rec {
        crateName = "hyper-tls";
        version = "0.5.0";
        edition = "2018";
        sha256 = "01crgy13102iagakf6q4mb75dprzr7ps1gj0l5hxm1cvm7gks66n";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            usesDefaultFeatures = false;
            features = [ "tcp" "client" ];
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            usesDefaultFeatures = false;
            features = [ "http1" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "io-std" "macros" "io-util" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.53";
        edition = "2018";
        sha256 = "0ra7nvai8n3alvljswacjbnhfcpivpi7xqbc5n048w18gdk25hb4";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: (target."os" == "haiku");
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."os" == "windows");
            features = [ "activation" "combaseapi" "objbase" "roapi" "winerror" "winstring" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1jix9qrqxclj9r4wkg7d3fr987d77vdg3qy2c5hl4ry19wlaw0q7";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        dependencies = [
          {
            name = "cxx";
            packageId = "cxx";
          }
        ];
        buildDependencies = [
          {
            name = "cxx-build";
            packageId = "cxx-build";
          }
        ];

      };
      "im" = rec {
        crateName = "im";
        version = "15.1.0";
        edition = "2018";
        sha256 = "1sg0jy9y0l3lqjpjyclj6kspi027mx177dgrmacgjni8y0zx7b6h";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "bitmaps";
            packageId = "bitmaps";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "rand_xoshiro";
            packageId = "rand_xoshiro";
          }
          {
            name = "sized-chunks";
            packageId = "sized-chunks";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "proptest" = [ "dep:proptest" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "refpool" = [ "dep:refpool" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.9.2";
        edition = "2021";
        sha256 = "16dkr2h5p379jcr8rnb420396yvzid2myirc2w70zcf43yffg18q";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0b2bx5qdlwayriidhrag8vhy10kdfimfhmb3jnjmsz2h9j1bwnvs";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "integer-encoding" = rec {
        crateName = "integer-encoding";
        version = "3.0.4";
        edition = "2018";
        sha256 = "00ng7jmv6pqwqc8w1297f768bn0spwwicdr7hb40baax00r3gc4b";
        authors = [
          "Lewin Bormann <lbo@spheniscida.de>"
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "futures-util" = [ "dep:futures-util" ];
          "futures_async" = [ "futures-util" "async-trait" ];
          "tokio" = [ "dep:tokio" ];
          "tokio_async" = [ "tokio" "async-trait" ];
        };
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "iresult" = rec {
        crateName = "iresult";
        version = "0.1.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./iresult; };
        authors = [
          "Stacey Ell <stacey.ell@gmail.com>"
        ];

      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "use_alloc" ];
      };
      "itertools 0.8.2" = rec {
        crateName = "itertools";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1154j48aw913v5jnyhpxialxhdn2sfpl4d7bwididyb1r05jsspm";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa 0.4.8" = rec {
        crateName = "itoa";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1m1dairwyx8kfxi7ab3b5jc71z1vigh9w4shnhiajji9avzr26dp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "itoa 1.0.5" = rec {
        crateName = "itoa";
        version = "1.0.5";
        edition = "2018";
        sha256 = "0h343sak699ci49anaa7l3p94b9kcc4ypaqwcam6qsz8p7s85mgs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.61";
        edition = "2018";
        sha256 = "0c075apyc5fxp2sbgr87qcvq53pcjxmp05l47lzlhpn5a0hxwpa4";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.139";
        edition = "2015";
        sha256 = "0yaz3z56c72p2nfgv2y2zdi8bzi7x3kdq2hzgishgw0da8ky6790";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "align" "default" "extra_traits" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.6.7";
        edition = "2015";
        sha256 = "10wq4a4jkman8k6y0v2cw3d38y1h3rw6d2in5klggm8jg90k46im";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "winerror" "errhandlingapi" "libloaderapi" ];
          }
        ];

      };
      "link-cplusplus" = rec {
        crateName = "link-cplusplus";
        version = "1.0.8";
        edition = "2018";
        sha256 = "1x84vvg7gn94x9zrvd67602h3ricmhlv19cpl2alzhqkqz4hglpc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "libcxx" = [ "libc++" ];
          "libstdcxx" = [ "libstdc++" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.6";
        edition = "2015";
        sha256 = "03vpgw7x507g524nx5i1jf5dl8k3kv0fzg8v3ip6qqwbpkqww5q7";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "lock_api 0.3.4" = rec {
        crateName = "lock_api";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0xgc5dzmajh0akbh5d6d7rj9mh5rzpk74pyrc946v2ixgakj9nn4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "lock_api 0.4.9" = rec {
        crateName = "lock_api";
        version = "0.4.9";
        edition = "2018";
        sha256 = "1py41vk243hwk345nhkn5nw0bd4m03gzjmprdjqq6rg5dwv12l23";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.17";
        edition = "2015";
        sha256 = "0biqlaaw1lsr8bpnmbcc0fvgjj34yy79ghqzyi0ali7vgil2xcdb";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
        ];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lru" = rec {
        crateName = "lru";
        version = "0.4.3";
        edition = "2015";
        sha256 = "0ds2l1rkbxw7v16c51bhnxyrhbjs1rz58kvxhp7xmfp5vrfk8286";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.6.3";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "magnetite" = rec {
        crateName = "magnetite";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "magnetite"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./magnetite; };
        authors = [
          "Stacey Ell <stacey.ell@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "clap";
            packageId = "clap 3.2.23";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "fuse";
            packageId = "fuse";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hyper";
            packageId = "hyper 0.13.10";
          }
          {
            name = "iresult";
            packageId = "iresult";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "lru";
            packageId = "lru";
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "metrics";
            packageId = "metrics";
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "metrics-runtime";
            packageId = "metrics-runtime";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "prost";
            packageId = "prost 0.6.1";
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.6.1";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "rmp-serde";
            packageId = "rmp-serde";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha-1";
            packageId = "sha-1";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "full" ];
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "tonic";
            packageId = "tonic";
            features = [ "codegen" "transport" "prost" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber 0.1.6";
          }
        ];
        buildDependencies = [
          {
            name = "tonic-build";
            packageId = "tonic-build";
            features = [ "prost" ];
          }
        ];
        features = {
          "fuse" = [ "dep:fuse" ];
          "with-fuse" = [ "fuse" ];
        };
        resolvedDefaultFeatures = [ "default" "fuse" "with-fuse" "with-mse" ];
      };
      "magnetite-common" = rec {
        crateName = "magnetite-common";
        version = "0.1.0";
        edition = "2018";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./magnetite-common; };
        authors = [
          "Stacey Ell <stacey.ell@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "magnetite-tracker" = rec {
        crateName = "magnetite-tracker";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          { name = "magnetite-tracker"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./magnetite-tracker; };
        dependencies = [
          {
            name = "bencode";
            packageId = "bencode";
          }
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "clap";
            packageId = "clap 3.2.23";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            features = [ "full" ];
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            features = [ "metrics" "rt-tokio" "rt-tokio-current-thread" ];
          }
          {
            name = "opentelemetry-jaeger";
            packageId = "opentelemetry-jaeger";
            features = [ "hyper" "hyper-tls" "collector_client" "hyper_collector_client" "hyper_tls_collector_client" "tokio" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-opentelemetry";
            packageId = "tracing-opentelemetry";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber 0.3.16";
            features = [ "tracing" "tracing-serde" "serde_json" "serde" "parking_lot" "env-filter" "json" ];
          }
        ];

      };
      "magnetite-tracker-lib" = rec {
        crateName = "magnetite-tracker-lib";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./magnetite-tracker/lib; };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "heap-dist-key";
            packageId = "heap-dist-key";
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
          }
        ];

      };
      "matchers 0.0.1" = rec {
        crateName = "matchers";
        version = "0.0.1";
        edition = "2018";
        sha256 = "1q8ckqmkjqkznvdi9x0z769yz2bmvlqcwx51ad2lpk4mfmgpi6gh";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata";
          }
        ];

      };
      "matchers 0.1.0" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata";
          }
        ];

      };
      "matchit" = rec {
        crateName = "matchit";
        version = "0.7.0";
        edition = "2021";
        sha256 = "0h7a1a57wamz0305dipj20shv2b5dw47jjp6dsgfaxmpmznlhwmq";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "maybe-uninit" = rec {
        crateName = "maybe-uninit";
        version = "2.0.0";
        edition = "2015";
        sha256 = "004y0nzmpfdrhz251278341z6ql34iv1k6dp1h6af7d6nd6jwc30";
        authors = [
          "est31 <MTest31@outlook.com>"
          "The Rust Project Developers"
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0vanfk5mzs1g1syqnj03q8n0syggnhn55dq535h2wxr7rwpfbzrd";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "libc" = [ "dep:libc" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.5.6";
        edition = "2015";
        sha256 = "1ahi51aa650s2p9ib1a4ifgqv0pzmsxlm9z4xdgvi9zdd7q7ac84";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "metrics" = rec {
        crateName = "metrics";
        version = "0.12.1";
        edition = "2018";
        sha256 = "17fkdb7sm4sschwzxfd5jzrczl4mszpmb5prl8d1lwg8xhkh5dsi";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "metrics-core" = rec {
        crateName = "metrics-core";
        version = "0.5.2";
        edition = "2018";
        sha256 = "0j1gh7ndpwscqlngkl794y58mkzcrahci18ir7v4n7zl3wx4n1kw";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];

      };
      "metrics-exporter-http" = rec {
        crateName = "metrics-exporter-http";
        version = "0.3.0";
        edition = "2018";
        sha256 = "09sfflzz1xrjg436pjq52cc316ydplyiwclaqv2js1mf0k91fh71";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper 0.13.10";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
        ];

      };
      "metrics-exporter-log" = rec {
        crateName = "metrics-exporter-log";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1az8cgicfpsd3ccl8ny5l6dwdb9kjqglgkiixgjvvy6mdf0n7z7k";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "time" ];
          }
        ];

      };
      "metrics-observer-json" = rec {
        crateName = "metrics-observer-json";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1lzwv6qpyb04ygm7psnvp86zs1gqlf6v5krxhy7nncvc19331sdv";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            usesDefaultFeatures = false;
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "metrics-util";
            packageId = "metrics-util";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "metrics-observer-prometheus" = rec {
        crateName = "metrics-observer-prometheus";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1flfn3w3ivsbgy8giymvj13gmicwz1jml4rjj8iqpvw5hanj9zjb";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            usesDefaultFeatures = false;
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "metrics-util";
            packageId = "metrics-util";
          }
        ];

      };
      "metrics-observer-yaml" = rec {
        crateName = "metrics-observer-yaml";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0db3xknx3d4z3pjqbw2j3fhibx72ss95mmvmzh75d4im048nixl3";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "hdrhistogram";
            packageId = "hdrhistogram";
            usesDefaultFeatures = false;
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "metrics-util";
            packageId = "metrics-util";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
        ];

      };
      "metrics-runtime" = rec {
        crateName = "metrics-runtime";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1d10sb0y3qgkbvxizva5anr9wd0pk17ic4h65xmhrk4wcdlly3nf";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
          }
          {
            name = "atomic-shim";
            packageId = "atomic-shim";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
          }
          {
            name = "im";
            packageId = "im";
          }
          {
            name = "metrics";
            packageId = "metrics";
            features = [ "std" ];
          }
          {
            name = "metrics-core";
            packageId = "metrics-core";
          }
          {
            name = "metrics-exporter-http";
            packageId = "metrics-exporter-http";
            optional = true;
          }
          {
            name = "metrics-exporter-log";
            packageId = "metrics-exporter-log";
            optional = true;
          }
          {
            name = "metrics-observer-json";
            packageId = "metrics-observer-json";
            optional = true;
          }
          {
            name = "metrics-observer-prometheus";
            packageId = "metrics-observer-prometheus";
            optional = true;
          }
          {
            name = "metrics-observer-yaml";
            packageId = "metrics-observer-yaml";
            optional = true;
          }
          {
            name = "metrics-util";
            packageId = "metrics-util";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.2";
          }
          {
            name = "quanta";
            packageId = "quanta";
          }
        ];
        features = {
          "default" = [ "exporters" "observers" ];
          "exporters" = [ "metrics-exporter-log" "metrics-exporter-http" ];
          "metrics-exporter-http" = [ "dep:metrics-exporter-http" ];
          "metrics-exporter-log" = [ "dep:metrics-exporter-log" ];
          "metrics-observer-json" = [ "dep:metrics-observer-json" ];
          "metrics-observer-prometheus" = [ "dep:metrics-observer-prometheus" ];
          "metrics-observer-yaml" = [ "dep:metrics-observer-yaml" ];
          "observers" = [ "metrics-observer-yaml" "metrics-observer-json" "metrics-observer-prometheus" ];
        };
        resolvedDefaultFeatures = [ "default" "exporters" "metrics-exporter-http" "metrics-exporter-log" "metrics-observer-json" "metrics-observer-prometheus" "metrics-observer-yaml" "observers" ];
      };
      "metrics-util" = rec {
        crateName = "metrics-util";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0y135iy6531vramcyl9lln7nwa01arnmh92pswimm6ki83q1jxi7";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.16";
        edition = "2015";
        sha256 = "13dcm9lh01hdwfjcg74ppljyjfj1c6w3a3cwkhxf0w8wa37cfq1a";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.6.2";
        edition = "2018";
        sha256 = "1yp8z6yll5ypz1ldmgnv7zi0r78kbvmqmn2mii77jzmk5069axdj";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "mio 0.6.23" = rec {
        crateName = "mio";
        version = "0.6.23";
        edition = "2015";
        sha256 = "1i2c1vl8lr45apkh8xbh9k56ihfsmqff5l7s2fya7whvp7sndzaa";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "miow";
            packageId = "miow 0.2.2";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio 0.8.6" = rec {
        crateName = "mio";
        version = "0.8.6";
        edition = "2018";
        sha256 = "1ygx5chq81k3vk2bx722xwcwf2qydmm337jsnijgzd7mxx39m7av";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "default" "net" "os-ext" "os-poll" ];
      };
      "mio-named-pipes" = rec {
        crateName = "mio-named-pipes";
        version = "0.1.7";
        edition = "2018";
        sha256 = "0mjnjcg5dkb2jwxh4zxx4fgp15wr3hj9r53z4hdm4pnm1z2w2h08";
        authors = [
          "Brendan Molloy <brendan@bbqsrc.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "mio";
            packageId = "mio 0.6.23";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "miow";
            packageId = "miow 0.3.7";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "winerror" "ioapiset" "minwinbase" "winbase" ];
          }
        ];

      };
      "mio-uds" = rec {
        crateName = "mio-uds";
        version = "0.6.8";
        edition = "2015";
        sha256 = "1w36w09gd8as1mah80wdy0kgpshmphmljj68gij34hvdnag6kjxg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "iovec";
            packageId = "iovec";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio 0.6.23";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "miow 0.2.2" = rec {
        crateName = "miow";
        version = "0.2.2";
        edition = "2015";
        sha256 = "0kcl8rnv0bhiarcdakik670w8fnxzlxhi1ys7152sck68510in7b";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];

      };
      "miow 0.3.7" = rec {
        crateName = "miow";
        version = "0.3.7";
        edition = "2018";
        sha256 = "08afp2xfpxmdw003111lxz6g9jgbj4zi2fpldvv7da6d4nqcbwdr";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "std" "fileapi" "handleapi" "ioapiset" "minwindef" "namedpipeapi" "ntdef" "synchapi" "winerror" "winsock2" "ws2def" "ws2ipdef" ];
          }
        ];

      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.8.3";
        edition = "2015";
        sha256 = "0sicyz4n500vdhgcxn4g8jz97cp1ijir1rnbgph3pmx9ckz4dkp5";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "native-tls" = rec {
        crateName = "native-tls";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0bmrlg0fmzxaycjpkgkchi93av07v2yf9k33gc12ca9gqdrn28h7";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (!((target."os" == "windows") || (target."os" == "macos") || (target."os" == "ios")));
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "alpn" = [ "security-framework/alpn" ];
          "vendored" = [ "openssl/vendored" ];
        };
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.38";
        edition = "2015";
        sha256 = "0cf66y4415qc1i9sr0rrn9my5f1pgxzf3xllwsr309fdrycxzl3l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || (target."os" == "wasi"));
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.17.0";
        edition = "2015";
        sha256 = "0qvk09kib3jpvpbaps0682nav20ibql61pf1s2h8jx9v5igpir2h";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."os" == "dragonfly");
          }
        ];

      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."os" == "windows");
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.45";
        edition = "2015";
        sha256 = "1ncwavvwdmsqzxnn65phv6c6nn72pnv9xhpmjd6a429mzf4k6p92";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.15";
        edition = "2015";
        sha256 = "1kfdqqw2ndz0wx2j75v9nbjx7d3mh3150zs4p5595y02rwsdx3jp";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.15.0";
        edition = "2015";
        sha256 = "0fsrjy3arnbcl41vz0gppya8d7d24cpkjgfflr3v8pivl4nrxb0g";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.2.6";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "object" = rec {
        crateName = "object";
        version = "0.30.3";
        edition = "2018";
        sha256 = "0fdl7qjsz1j9kl3j7f4656fswzrqpyj2kgaizhknmjrx7mfjd1pa";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "flate2" "std" ];
          "core" = [ "dep:core" ];
          "crc32fast" = [ "dep:crc32fast" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" ];
          "flate2" = [ "dep:flate2" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "indexmap" = [ "dep:indexmap" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" "xcoff" ];
          "wasm" = [ "wasmparser" ];
          "wasmparser" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" ];
          "write_core" = [ "crc32fast" "indexmap" "hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap/std" "crc32fast/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.17.1";
        edition = "2021";
        sha256 = "1lrsy9c5ikf2iwxr4iwgd3rlq9mg8alh0np1g8abnvp1k4151rdp";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "atomic_polyfill" = [ "dep:atomic_polyfill" ];
          "critical-section" = [ "critical_section" "atomic_polyfill" ];
          "critical_section" = [ "dep:critical_section" ];
          "default" = [ "std" ];
          "parking_lot" = [ "parking_lot_core" ];
          "parking_lot_core" = [ "dep:parking_lot_core" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.45";
        edition = "2018";
        sha256 = "1qgjhfpvnl6lgqg2fz18vz74ak31k1r0yqk2gzwyvi9vs27l40mi";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "openssl-macros";
            packageId = "openssl-macros";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            rename = "ffi";
          }
        ];
        features = {
          "bindgen" = [ "ffi/bindgen" ];
          "unstable_boringssl" = [ "ffi/unstable_boringssl" ];
          "vendored" = [ "ffi/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "openssl-macros" = rec {
        crateName = "openssl-macros";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v3kgnzbadrf9c06q4cqmbjas53av73n5w7wwz3n0nb6257y80dm";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1kq18qm48rvkwgcggfkqq6pm948190czqc94d6bm2sir5hq1l0gz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.80";
        edition = "2015";
        sha256 = "1dwhqz7q90qal7yjfbk54wvpj5p5x3q1ksgbb0wvhifdaiwbzfr3";
        build = "build/main.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "bssl-sys" = [ "dep:bssl-sys" ];
          "openssl-src" = [ "dep:openssl-src" ];
          "unstable_boringssl" = [ "bssl-sys" ];
          "vendored" = [ "openssl-src" ];
        };
      };
      "opentelemetry" = rec {
        crateName = "opentelemetry";
        version = "0.18.0";
        edition = "2021";
        sha256 = "0vh8xzzigx1n95pv3vxd09lxan40626hwjry6q56q44a53bw7mk9";
        dependencies = [
          {
            name = "opentelemetry_api";
            packageId = "opentelemetry_api";
          }
          {
            name = "opentelemetry_sdk";
            packageId = "opentelemetry_sdk";
          }
        ];
        features = {
          "default" = [ "trace" ];
          "metrics" = [ "opentelemetry_api/metrics" "opentelemetry_sdk/metrics" ];
          "rt-async-std" = [ "opentelemetry_sdk/rt-async-std" ];
          "rt-tokio" = [ "opentelemetry_sdk/rt-tokio" ];
          "rt-tokio-current-thread" = [ "opentelemetry_sdk/rt-tokio-current-thread" ];
          "testing" = [ "opentelemetry_api/testing" "opentelemetry_sdk/testing" ];
          "trace" = [ "opentelemetry_api/trace" "opentelemetry_sdk/trace" ];
        };
        resolvedDefaultFeatures = [ "default" "metrics" "rt-tokio" "rt-tokio-current-thread" "trace" ];
      };
      "opentelemetry-http" = rec {
        crateName = "opentelemetry-http";
        version = "0.7.0";
        edition = "2021";
        sha256 = "0pc20cbs7xxqylr750303i1fd4x55icl4i8srqz1hr33sjnpkp0y";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "http2" "client" "tcp" ];
          }
          {
            name = "opentelemetry_api";
            packageId = "opentelemetry_api";
            features = [ "trace" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "time" ];
          }
        ];
        features = {
          "hyper" = [ "dep:hyper" ];
          "isahc" = [ "dep:isahc" ];
          "reqwest" = [ "dep:reqwest" ];
          "surf" = [ "dep:surf" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "hyper" "tokio" ];
      };
      "opentelemetry-jaeger" = rec {
        crateName = "opentelemetry-jaeger";
        version = "0.17.0";
        edition = "2021";
        sha256 = "0yigfk77znmdammxdq6r15pb51pcynsc6k8yjdw8ax3874kmsy0y";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "headers";
            packageId = "headers";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "client" ];
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "opentelemetry-http";
            packageId = "opentelemetry-http";
            optional = true;
          }
          {
            name = "opentelemetry-semantic-conventions";
            packageId = "opentelemetry-semantic-conventions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "thrift";
            packageId = "thrift";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            optional = true;
            features = [ "net" "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "net" "sync" ];
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "base64" = [ "dep:base64" ];
          "collector_client" = [ "http" "opentelemetry-http" ];
          "full" = [ "collector_client" "hyper_collector_client" "hyper_tls_collector_client" "isahc_collector_client" "reqwest_collector_client" "reqwest_blocking_collector_client" "reqwest_rustls_collector_client" "surf_collector_client" "wasm_collector_client" "rt-tokio" "rt-tokio-current-thread" "rt-async-std" "integration_test" ];
          "futures-util" = [ "dep:futures-util" ];
          "headers" = [ "dep:headers" ];
          "http" = [ "dep:http" ];
          "hyper" = [ "dep:hyper" ];
          "hyper-tls" = [ "dep:hyper-tls" ];
          "hyper_collector_client" = [ "collector_client" "headers" "http" "hyper" "opentelemetry-http/tokio" "opentelemetry-http/hyper" ];
          "hyper_tls_collector_client" = [ "hyper_collector_client" "hyper-tls" ];
          "integration_test" = [ "tonic" "prost" "prost-types" "rt-tokio" "collector_client" "hyper_collector_client" "hyper_tls_collector_client" "reqwest_collector_client" "surf_collector_client" "isahc_collector_client" ];
          "isahc" = [ "dep:isahc" ];
          "isahc_collector_client" = [ "isahc" "opentelemetry-http/isahc" ];
          "js-sys" = [ "dep:js-sys" ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "prost" = [ "dep:prost" ];
          "prost-types" = [ "dep:prost-types" ];
          "reqwest" = [ "dep:reqwest" ];
          "reqwest_blocking_collector_client" = [ "reqwest/blocking" "collector_client" "headers" "opentelemetry-http/reqwest" ];
          "reqwest_collector_client" = [ "reqwest" "collector_client" "headers" "opentelemetry-http/reqwest" ];
          "reqwest_rustls_collector_client" = [ "reqwest" "reqwest/rustls-tls-native-roots" "collector_client" "headers" "opentelemetry-http/reqwest" ];
          "rt-async-std" = [ "async-std" "opentelemetry/rt-async-std" ];
          "rt-tokio" = [ "tokio" "opentelemetry/rt-tokio" ];
          "rt-tokio-current-thread" = [ "tokio" "opentelemetry/rt-tokio-current-thread" ];
          "surf" = [ "dep:surf" ];
          "surf_collector_client" = [ "surf" "collector_client" "opentelemetry-http/surf" ];
          "tokio" = [ "dep:tokio" ];
          "tonic" = [ "dep:tonic" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasm-bindgen-futures" = [ "dep:wasm-bindgen-futures" ];
          "wasm_collector_client" = [ "base64" "futures-util" "http" "js-sys" "pin-project-lite" "wasm-bindgen" "wasm-bindgen-futures" "web-sys" ];
          "web-sys" = [ "dep:web-sys" ];
        };
        resolvedDefaultFeatures = [ "collector_client" "default" "headers" "http" "hyper" "hyper-tls" "hyper_collector_client" "hyper_tls_collector_client" "opentelemetry-http" "tokio" ];
      };
      "opentelemetry-semantic-conventions" = rec {
        crateName = "opentelemetry-semantic-conventions";
        version = "0.10.0";
        edition = "2021";
        sha256 = "1swyxkrhm3n1r8639092fxiyl0r9l27vmqhqdmivc2mv18iy00lv";
        dependencies = [
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
          }
        ];

      };
      "opentelemetry_api" = rec {
        crateName = "opentelemetry_api";
        version = "0.18.0";
        edition = "2021";
        sha256 = "08hcfvvjnqgw2i86pks6rhmxnac9jyafx543g8y83k3s3vi9cky2";
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" "sink" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "trace" ];
          "fnv" = [ "dep:fnv" ];
          "metrics" = [ "fnv" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "testing" = [ "trace" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "trace" = [ "pin-project-lite" ];
        };
        resolvedDefaultFeatures = [ "default" "fnv" "metrics" "pin-project-lite" "trace" ];
      };
      "opentelemetry_sdk" = rec {
        crateName = "opentelemetry_sdk";
        version = "0.18.0";
        edition = "2021";
        sha256 = "04wiq0jsdxr8r1760hq5r57az68ljcbby57jlb1626rp6d4ir90w";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel 0.5.6";
            optional = true;
          }
          {
            name = "dashmap";
            packageId = "dashmap";
            optional = true;
          }
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" "sink" "async-await-macro" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry_api";
            packageId = "opentelemetry_api";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "std_rng" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rt" "time" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "dashmap" = [ "dep:dashmap" ];
          "default" = [ "trace" ];
          "fnv" = [ "dep:fnv" ];
          "http" = [ "dep:http" ];
          "jaeger_remote_sampler" = [ "trace" "opentelemetry-http" "http" "serde" "serde_json" "url" ];
          "metrics" = [ "opentelemetry_api/metrics" "dashmap" "fnv" ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rand" = [ "dep:rand" ];
          "rt-async-std" = [ "async-std" ];
          "rt-tokio" = [ "tokio" "tokio-stream" ];
          "rt-tokio-current-thread" = [ "tokio" "tokio-stream" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "testing" = [ "opentelemetry_api/testing" "trace" "metrics" "rt-async-std" "rt-tokio" "rt-tokio-current-thread" "tokio/macros" "tokio/rt-multi-thread" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "trace" = [ "opentelemetry_api/trace" "crossbeam-channel" "rand" "async-trait" "percent-encoding" ];
          "url" = [ "dep:url" ];
        };
        resolvedDefaultFeatures = [ "async-trait" "crossbeam-channel" "dashmap" "default" "fnv" "metrics" "percent-encoding" "rand" "rt-tokio" "rt-tokio-current-thread" "tokio" "tokio-stream" "trace" ];
      };
      "ordered-float" = rec {
        crateName = "ordered-float";
        version = "1.1.1";
        edition = "2015";
        sha256 = "1drp3v9jsm1mn0wqp4p5y19j3bmz3w5rw4yxzi39zlld4wssy19k";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "os_str_bytes" = rec {
        crateName = "os_str_bytes";
        version = "6.4.1";
        edition = "2021";
        sha256 = "1vi3wx4zs8wgfhhzbk1n279gn8yp0n4l8s8wyb4mfm7avawj0y4v";
        authors = [
          "dylni"
        ];
        features = {
          "default" = [ "memchr" "raw_os_str" ];
          "memchr" = [ "dep:memchr" ];
          "print_bytes" = [ "dep:print_bytes" ];
          "uniquote" = [ "dep:uniquote" ];
        };
        resolvedDefaultFeatures = [ "raw_os_str" ];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "owning_ref" = rec {
        crateName = "owning_ref";
        version = "0.4.1";
        edition = "2015";
        sha256 = "1kjj9m28wjv452jw49p1mp3d8ql058x78v4bz00avr7rvsnmpxbg";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
        ];

      };
      "packet" = rec {
        crateName = "packet";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0i39j7iy19x3wsb7jw2xgcz6i03cv1mgdv2ai644zv8r0snwfdn1";
        authors = [
          "meh. <meh@schizofreni.co>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "hwaddr";
            packageId = "hwaddr";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "parking_lot 0.10.2" = rec {
        crateName = "parking_lot";
        version = "0.10.2";
        edition = "2018";
        sha256 = "0pjhcbyk6n0g6jsr6s9nf4x8wribm1b2yf8fgc8drbqa77mh99yk";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api 0.3.4";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.7.3";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot 0.12.1" = rec {
        crateName = "parking_lot";
        version = "0.12.1";
        edition = "2018";
        sha256 = "13r2xk7mnxfc5g0g6dkdxqdqad99j7s7z8zhzz4npw5r0g0v4hip";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api 0.4.9";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.9.7";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core 0.7.3" = rec {
        crateName = "parking_lot_core";
        version = "0.7.3";
        edition = "2018";
        sha256 = "167wvxai4a5zhpy5zfgfbm5c566vfffjlr3fkrwkq21kn9mkhgxr";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.1.57";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "parking_lot_core 0.9.7" = rec {
        crateName = "parking_lot_core";
        version = "0.9.7";
        edition = "2018";
        sha256 = "08cm5gg3a4jmr683x9dgih8vj66yn772kjvc8y1m0flyz6wwnsch";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.16";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_LibraryLoader" "Win32_System_SystemServices" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.11";
        edition = "2018";
        sha256 = "1fpf7n6wvlf1pg5xplgaknaim5kgrbmigpcq005hf02d8b85n6nh";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "pcap" = rec {
        crateName = "pcap";
        version = "0.9.2";
        edition = "2018";
        sha256 = "14013xkkjd1wk5zhxqvvigr54lwdfy5i9rsb2dw1spqy2a58dla2";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Wojciech Kozlowski <wk@wojciechkozlowski.eu>"
          "Hideki Sekine"
        ];
        dependencies = [
          {
            name = "errno";
            packageId = "errno";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."os" == "windows");
            features = [ "ws2def" "ws2ipdef" ];
          }
        ];
        buildDependencies = [
          {
            name = "libloading";
            packageId = "libloading";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];
        features = {
          "capture-stream" = [ "mio" "tokio" "futures" ];
          "clippy" = [ "dep:clippy" ];
          "full" = [ "capture-stream" ];
          "futures" = [ "dep:futures" ];
          "mio" = [ "dep:mio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.2.0";
        edition = "2018";
        sha256 = "13nrpp6r1f4k14viksga3094krcrxgv4b42kqbriy63k7ln5g327";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1912xw827flj8mzqm62jcbg0cv54qfhzm48c13ilzr9px67d5msd";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.8.0";
        edition = "2018";
        sha256 = "04pyv8bzqvw69rd5dynd5nb85py1hf7wa4ixyhrvdz1l5qin3yrx";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" "proc-macro-hack" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "proc-macro-hack" = [ "dep:proc-macro-hack" ];
          "std" = [ "phf_shared/std" ];
          "unicase" = [ "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1xssnqrrcn0nr9ayqrnm8xm37ac4xvwcx8pax7jxss7yxawzh360";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.0.12";
        edition = "2018";
        sha256 = "1k3f9jkia3idxl2pqxamszwnl89dk52fa4jqj3p7zmmwnq4scadd";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.0.12";
        edition = "2018";
        sha256 = "0maa6icn7rdfy4xvgfaq7m7bwpw9f19wg76f1ncsiixd0lgdp6q6";
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "pin-project-lite 0.1.12" = rec {
        crateName = "pin-project-lite";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0xx7f3wzc8ydvd1v2mmrxfypjchp52bphrirf08phbq8ba8n8yr5";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];

      };
      "pin-project-lite 0.2.9" = rec {
        crateName = "pin-project-lite";
        version = "0.2.9";
        edition = "2018";
        sha256 = "05n1z851l356hpgqadw4ar64mjanaxq1qlwqsf2k05ziq8xax9z0";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.26";
        edition = "2015";
        sha256 = "0q2i61dhqvawc51zfzl3jich57w0cjgfa894hn6ings7ffgsbjba";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.17";
        edition = "2018";
        sha256 = "1pp6g52aw970adv3x2310n7glqnji96z0a9wiamzw89ibf0ayh2v";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.1.23";
        edition = "2021";
        sha256 = "0y2wbmflbkgp13ywd7qyq7hyi59x5zazmljnw8gg09wnfwak4zp9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "parsing" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.20+deprecated";
        edition = "2018";
        sha256 = "0s402hmcs3k9nd6rlp07zkr1lz7yimkmcwcbgnly2zr44wamwdyw";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.51";
        edition = "2018";
        sha256 = "1mj9r146akd3ldfic70bzqr7hwxd35lr0h551yk1vlirbfp7qwjx";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" "span-locations" ];
      };
      "prost 0.11.6" = rec {
        crateName = "prost";
        version = "0.11.6";
        edition = "2021";
        sha256 = "1626jdnhrqwxiyd210x1li660322d5z1ganl9ch3gz130bh45p11";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.11.6";
            optional = true;
          }
        ];
        features = {
          "default" = [ "prost-derive" "std" ];
          "prost-derive" = [ "dep:prost-derive" ];
        };
        resolvedDefaultFeatures = [ "prost-derive" "std" ];
      };
      "prost 0.6.1" = rec {
        crateName = "prost";
        version = "0.6.1";
        edition = "2018";
        sha256 = "04n2i5ryhi5pwl524pxmfxv5z6l5s9xwf9r9wdfs8i311bzawjff";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "prost-derive";
            packageId = "prost-derive 0.6.1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "prost-derive" ];
          "prost-derive" = [ "dep:prost-derive" ];
        };
        resolvedDefaultFeatures = [ "default" "prost-derive" ];
      };
      "prost-build" = rec {
        crateName = "prost-build";
        version = "0.11.6";
        edition = "2021";
        sha256 = "0bh1l8xrhjk42kgdsxx82sfnvfqgjjg1c19wvw9f53xhixravy53";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
          }
          {
            name = "prost";
            packageId = "prost 0.11.6";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-types";
            packageId = "prost-types 0.11.6";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-bool" ];
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "which";
            packageId = "which";
          }
        ];
        features = {
          "cleanup-markdown" = [ "pulldown-cmark" "pulldown-cmark-to-cmark" ];
          "default" = [ "format" ];
          "format" = [ "prettyplease" "syn" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "pulldown-cmark" = [ "dep:pulldown-cmark" ];
          "pulldown-cmark-to-cmark" = [ "dep:pulldown-cmark-to-cmark" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "format" "prettyplease" "syn" ];
      };
      "prost-derive 0.11.6" = rec {
        crateName = "prost-derive";
        version = "0.11.6";
        edition = "2021";
        sha256 = "0pdc52n10rjnn3yamhbp4i33p40b7pdpd4v2p4p757zah448rnlb";
        procMacro = true;
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
            features = [ "use_alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-derive 0.6.1" = rec {
        crateName = "prost-derive";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0wlgn7nbb3x79xdlxkg47m05gxw6cd302hzc5yhi1pmcjnds2yjk";
        procMacro = true;
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.8.2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" ];
          }
        ];

      };
      "prost-types 0.11.6" = rec {
        crateName = "prost-types";
        version = "0.11.6";
        edition = "2021";
        sha256 = "123pafnx4kvn8qdfdrrraz2xp3hik4ddh3bm7pc9cgj315i55q55";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost 0.11.6";
            usesDefaultFeatures = false;
            features = [ "prost-derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "prost/std" ];
        };
      };
      "prost-types 0.6.1" = rec {
        crateName = "prost-types";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1ahp6j6b62zfv1d0hfns5rs8k76xgbv7dgkm9cq03h4p0rygcd0q";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "prost";
            packageId = "prost 0.6.1";
          }
        ];

      };
      "quanta" = rec {
        crateName = "quanta";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0faxchaj4kn167vwgw0a7xa2g98dbmxcfmbpwgzazmwa7pd4yj11";
        authors = [
          "Toby Lawrence <tlawrence@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "atomic-shim";
            packageId = "atomic-shim";
          }
          {
            name = "ctor";
            packageId = "ctor";
            target = { target, features }: (target."arch" == "mips");
          }
          {
            name = "ctor";
            packageId = "ctor";
            target = { target, features }: (target."arch" == "powerpc");
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "profileapi" ];
          }
        ];
        features = {
          "asm" = [ "tsc" ];
        };
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];

      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.23";
        edition = "2018";
        sha256 = "0ywwzw5xfwwgq62ihp4fbjbfdjb3ilss2vh3fka18ai59lvdhml8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "getrandom_package" = [ "dep:getrandom_package" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "simd_support" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_pcg" = [ "dep:rand_pcg" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.8";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "rand_xoshiro" = rec {
        crateName = "rand_xoshiro";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1ajsic84rzwz5qr0mzlay8vi17swqi684bqvwqyiim3flfrcv5vg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
      };
      "redox_syscall 0.1.57" = rec {
        crateName = "redox_syscall";
        version = "0.1.57";
        edition = "2015";
        sha256 = "1kh59fpwy33w9nwd5iyc283yglq8pf2s41hnhvl48iax9mz0zk21";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];

      };
      "redox_syscall 0.2.16" = rec {
        crateName = "redox_syscall";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16jicm96kjyzm802cxdd1k9jmcph0db1a4lhslcnhjsvhp0mhnpv";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];

      };
      "regex" = rec {
        crateName = "regex";
        version = "1.7.1";
        edition = "2018";
        sha256 = "0czp6hxg02lm02hvlhp9xjkd65cjcagw119crnaznwd5idsabaj8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "aho-corasick" = [ "dep:aho-corasick" ];
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "memchr" = [ "dep:memchr" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.28";
        edition = "2018";
        sha256 = "0j68z4jnxshfymb08j1drvxn9wgs1469047lfaq4im78wcxn0v25";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1rzqbsgkmr053bxxl04vmvsd1njyz0nxvly97aip6aa2cmb15k9s";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];

      };
      "rmp" = rec {
        crateName = "rmp";
        version = "0.8.11";
        edition = "2018";
        sha256 = "17rw803xv84csxgd654g7q64kqf9zgkvhsn8as3dbmlg6mr92la4";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "byteorder/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rmp-serde" = rec {
        crateName = "rmp-serde";
        version = "0.14.4";
        edition = "2018";
        sha256 = "1n2jn3yj5zbjhz5lah98yylpzhfc1c0h5fcksjp75r3gj86dgrsc";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rmp";
            packageId = "rmp";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.21";
        edition = "2015";
        sha256 = "0hn3xyd2n3bg3jnc5a5jbzll32n4r5a65bqzs287l30m5c53xw3y";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0w4da3xx21ih64lr1f210gfvj4ahmady03v665h515l922gfi0sm";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.12";
        edition = "2018";
        sha256 = "1ppcgnyfs12p545bl7762jp9b11rlzmgb7yzrr5lnzb8xm1rfjvv";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.21";
        edition = "2018";
        sha256 = "1cxivcbczzfv4295pqi5s80kr7nhs7xc0i40zf43b7q5qw3gng3i";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.42.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_Memory" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.42.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "scraper" = rec {
        crateName = "scraper";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          { name = "scraper"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./scraper; };
        dependencies = [
          {
            name = "bin-str";
            packageId = "bin-str";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "magnetite-common";
            packageId = "magnetite-common";
          }
          {
            name = "magnetite-tracker-lib";
            packageId = "magnetite-tracker-lib";
          }
        ];

      };
      "scratch" = rec {
        crateName = "scratch";
        version = "1.0.3";
        edition = "2015";
        sha256 = "1ck1ky9fbgh2c1mlypmlvyw3j1rai1pl7ngd7wxh4wz1ridv3k6x";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "2.8.2";
        edition = "2021";
        sha256 = "0m22kb2b6nrkvwprca8i2a93gms6l6cgfa5zcknlz0cda00vwcm3";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" "serial-number-bigint" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
          "default" = [ "OSX_10_9" ];
          "log" = [ "dep:log" ];
          "serial-number-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_9" "default" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.8.0";
        edition = "2018";
        sha256 = "1d13ncr0glxic1l7rqdivvi8nbcwscfm2lw8ppy63sbjc0lvpj9i";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_9" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_9" "default" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.152";
        edition = "2015";
        sha256 = "1ysykpc4a9f1yn7zikdwhyfs0bpa7mlc8vsm7sl4glr1606iyzdv";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.9";
        edition = "2018";
        sha256 = "1542ajxpmn8ywl7k8vhbm773klyx2ndd844f5kh95awsdx1xlss1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.152";
        edition = "2015";
        sha256 = "07jlbk3khspawlqayr5lhzgqirv031ap4p8asw199l7ciq8psj5g";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.93";
        edition = "2018";
        sha256 = "0xmwq2838lvc50g849k8qsrwvj7nfaaw5wns0x8mp24ikjv0dm6a";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa 1.0.5";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.8.26";
        edition = "2021";
        sha256 = "06y7gxy312mink8nsnmci9cw0ykpgsdcxmayg0snmdbnnwrp92jp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "yaml-rust";
            packageId = "yaml-rust";
          }
        ];

      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1pv387q0r7llk2cqzyq0nivzvkgqgzsiygqzlv7b68z9xl5lvngp";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.7.3";
          }
          {
            name = "digest";
            packageId = "digest 0.8.1";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.8.1";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "asm-aarch64" = [ "asm" "libc" ];
          "default" = [ "std" ];
          "libc" = [ "dep:libc" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.5";
        edition = "2018";
        sha256 = "18zb80sxn31kxdpl1ly6w17hkrvyf08zbxnpy8ckb6f3h3f96hph";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ((target."arch" == "aarch64") || (target."arch" == "x86") || (target."arch" == "x86_64"));
          }
          {
            name = "digest";
            packageId = "digest 0.10.6";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.6";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0cbb8kgwsyr3zzhsv8jrs3y1j3vsw4jxil42lfq31ikhdy0bl3wh";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.1";
        edition = "2015";
        sha256 = "18crkkw5k82bvcx088xlf5g4n3772m24qhzgfan80nda7d3rn8nq";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.10";
        edition = "2018";
        sha256 = "1pi5sb2j2wi92zfqj6qxnk11vk1qq2plya5g2a5kzbwrd0hf7lvv";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sized-chunks" = rec {
        crateName = "sized-chunks";
        version = "0.6.5";
        edition = "2018";
        sha256 = "07ix5fsdnpf2xsb0k5rbiwlmsicm2237fcx7blirp9p7pljr5mhn";
        authors = [
          "Bodil Stokke <bodil@bodil.org>"
        ];
        dependencies = [
          {
            name = "bitmaps";
            packageId = "bitmaps";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "array-ops" = [ "dep:array-ops" ];
          "default" = [ "std" ];
          "refpool" = [ "dep:refpool" ];
          "ringbuffer" = [ "array-ops" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.8";
        edition = "2018";
        sha256 = "0bgwxig8gkqp6gz8rvrpdj6qwa10karnsxwx7wsj5ay8kcf3aa35";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 0.6.14" = rec {
        crateName = "smallvec";
        version = "0.6.14";
        edition = "2015";
        sha256 = "1q4hz0ssnv24s6fq5kfp2wzrrprrrjiwc42a0h7s7nwym3mwlzxr";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 1.10.0" = rec {
        crateName = "smallvec";
        version = "1.10.0";
        edition = "2018";
        sha256 = "1q2k15fzxgwjpcdv3f323w24rbbfyv711ayz85ila12lg7zbw1x5";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "socket2 0.3.19" = rec {
        crateName = "socket2";
        version = "0.3.19";
        edition = "2018";
        sha256 = "0vldz14mxqxnjqb6an2pj7mgclv7nrk45cpscwq7g3fj2c0mfbhj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
            features = [ "align" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "ws2def" "ws2ipdef" "ws2tcpip" "minwindef" ];
          }
        ];
        features = {
        };
      };
      "socket2 0.4.7" = rec {
        crateName = "socket2";
        version = "0.4.7";
        edition = "2018";
        sha256 = "1gaf57dc16s1lfyv388w9vdl9qay15xds78jcwakml9kj3dx5qh2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.107";
        edition = "2018";
        sha256 = "1xg3315vx8civ8y0l5zxq5mkx07qskaqwnjak18aw0vfn6sn8h0z";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0q01lyj0gr9a93n10nxsn8lwbzq97jqd6b768x17c8f7v7gccir0";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.6";
        edition = "2018";
        sha256 = "03r1lydbf3japnlpc4wka7y90pmz1i0danaj3f9a7b431akdlszk";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.3.0";
        edition = "2018";
        sha256 = "1r3rdp66f7w075mz6blh244syr3h0lbm07ippn7xrbgfxbs1xnsw";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || (target."os" == "wasi"));
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.16";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        features = {
        };
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1dmrbsljxpfng905qkaxljlwjhv8h0i3969cbiv5rb7y8a4wymdy";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "textwrap 0.11.0" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "hyphenation" = [ "dep:hyphenation" ];
          "term_size" = [ "dep:term_size" ];
        };
      };
      "textwrap 0.16.0" = rec {
        crateName = "textwrap";
        version = "0.16.0";
        edition = "2021";
        sha256 = "0gbwkjf15l6p3x2rkr75fa4cpcs1ly4c8pmlfx5bl6zybcm24ai2";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        features = {
          "default" = [ "unicode-linebreak" "unicode-width" "smawk" ];
          "hyphenation" = [ "dep:hyphenation" ];
          "smawk" = [ "dep:smawk" ];
          "terminal_size" = [ "dep:terminal_size" ];
          "unicode-linebreak" = [ "dep:unicode-linebreak" ];
          "unicode-width" = [ "dep:unicode-width" ];
        };
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.38";
        edition = "2018";
        sha256 = "1l7yh18iqcr2jnl6qjx3ywvhny98cvda3biwc334ap3xm65d373a";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.38";
        edition = "2018";
        sha256 = "0vzkcjqkzzgrwwby92xvnbp11a8d70b1gkybm0zx1r458spjgcqz";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "thread-scoped" = rec {
        crateName = "thread-scoped";
        version = "1.0.2";
        edition = "2015";
        sha256 = "16dxl8grpii4vh20qikv2x7r871ggsf9m733xysv1lz506inmfxw";
        authors = [
          "arcnmx"
          "The Rust Project Developers"
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.7";
        edition = "2021";
        sha256 = "0lp19jdgvp5m4l60cgxdnl00yw1hlqy8gcywg9bddwng9h36zp9z";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "thrift" = rec {
        crateName = "thrift";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1w0gb6qf5hrz10nwdfpw2vnjb666549szhmp30pdgvmlvd68qrq9";
        authors = [
          "Apache Thrift Developers <dev@thrift.apache.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "integer-encoding";
            packageId = "integer-encoding";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ordered-float";
            packageId = "ordered-float";
          }
          {
            name = "threadpool";
            packageId = "threadpool";
            optional = true;
          }
        ];
        features = {
          "default" = [ "server" ];
          "log" = [ "dep:log" ];
          "server" = [ "threadpool" "log" ];
          "threadpool" = [ "dep:threadpool" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "server" "threadpool" ];
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.45";
        edition = "2015";
        sha256 = "0nl0pzv9yf56djy8y5dx25nka5pr2q1ivlandb3d24pksgx7ly8v";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "wasi";
            packageId = "wasi 0.10.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        features = {
          "rustc-serialize" = [ "dep:rustc-serialize" ];
        };
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = [ "keccak" "shake" "sha3" ];
          "kmac" = [ "cshake" ];
          "parallel_hash" = [ "cshake" ];
          "sp800" = [ "cshake" "kmac" "tuple_hash" ];
          "tuple_hash" = [ "cshake" ];
        };
        resolvedDefaultFeatures = [ "default" "shake" ];
      };
      "tokio 0.2.25" = rec {
        crateName = "tokio";
        version = "0.2.25";
        edition = "2018";
        sha256 = "14l0rll6y1dyzh6qcd8rma2ch3wx0dxzxq8b54di744sjirs40v7";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "iovec";
            packageId = "iovec";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "mio";
            packageId = "mio 0.6.23";
            optional = true;
          }
          {
            name = "mio-named-pipes";
            packageId = "mio-named-pipes";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "mio-uds";
            packageId = "mio-uds";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.1.12";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros 0.2.6";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "blocking" = [ "rt-core" ];
          "dns" = [ "rt-core" ];
          "fnv" = [ "dep:fnv" ];
          "fs" = [ "rt-core" "io-util" ];
          "full" = [ "blocking" "dns" "fs" "io-driver" "io-util" "io-std" "macros" "net" "process" "rt-core" "rt-util" "rt-threaded" "signal" "stream" "sync" "time" ];
          "futures-core" = [ "dep:futures-core" ];
          "io-driver" = [ "mio" "lazy_static" ];
          "io-std" = [ "rt-core" ];
          "io-util" = [ "memchr" ];
          "iovec" = [ "dep:iovec" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "memchr" = [ "dep:memchr" ];
          "mio" = [ "dep:mio" ];
          "mio-named-pipes" = [ "dep:mio-named-pipes" ];
          "mio-uds" = [ "dep:mio-uds" ];
          "net" = [ "dns" "tcp" "udp" "uds" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "io-driver" "libc" "mio-named-pipes" "signal" "winapi/consoleapi" "winapi/minwindef" "winapi/threadpoollegacyapiset" "winapi/winerror" ];
          "rt-core" = [ "slab" ];
          "rt-threaded" = [ "num_cpus" "rt-core" ];
          "signal" = [ "io-driver" "lazy_static" "libc" "mio-uds" "signal-hook-registry" "winapi/consoleapi" "winapi/minwindef" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "slab" = [ "dep:slab" ];
          "stream" = [ "futures-core" ];
          "sync" = [ "fnv" ];
          "tcp" = [ "io-driver" "iovec" ];
          "time" = [ "slab" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "udp" = [ "io-driver" ];
          "uds" = [ "io-driver" "mio-uds" "libc" ];
          "winapi" = [ "dep:winapi" ];
        };
        resolvedDefaultFeatures = [ "blocking" "default" "dns" "fnv" "fs" "full" "futures-core" "io-driver" "io-std" "io-util" "iovec" "lazy_static" "libc" "macros" "memchr" "mio" "mio-named-pipes" "mio-uds" "net" "num_cpus" "process" "rt-core" "rt-threaded" "rt-util" "signal" "signal-hook-registry" "slab" "stream" "sync" "tcp" "time" "tokio-macros" "udp" "uds" "winapi" ];
      };
      "tokio 1.25.0" = rec {
        crateName = "tokio";
        version = "1.25.0";
        edition = "2018";
        sha256 = "1byk7wy3vdabh8na2qlmq3ayr0yimqf91jlaq0a4rgmbxf80kq68";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "mio";
            packageId = "mio 0.8.6";
            optional = true;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.1";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2 0.4.7";
            optional = true;
            target = { target, features }: (!((target."arch" == "wasm32") || (target."arch" == "wasm64")));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros 1.8.2";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.42.0";
            target = { target, features }: (target."docsrs" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.42.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.1.0";
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2 0.4.7";
            target = {target, features}: (!((target."arch" == "wasm32") || (target."arch" == "wasm64")));
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "memchr" "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "memchr" = [ "dep:memchr" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "num_cpus" "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "memchr" "mio" "net" "num_cpus" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-io-timeout" = rec {
        crateName = "tokio-io-timeout";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1gx84f92q1491vj4pkn81j8pz1s3pgwnbrsdhfsa2556mli41drh";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "full" ];
          }
        ];

      };
      "tokio-macros 0.2.6" = rec {
        crateName = "tokio-macros";
        version = "0.2.6";
        edition = "2018";
        sha256 = "0ni60vnrf32r3wfhlahmnds1phx5d1xfbmyq9j0mz8kkzh5s0kg4";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "tokio-macros 1.8.2" = rec {
        crateName = "tokio-macros";
        version = "1.8.2";
        edition = "2018";
        sha256 = "1y3dphh8i4971wcfqxjhd662nain1i86rsf3y79mazr8vq7w0rnj";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "tokio-native-tls" = rec {
        crateName = "tokio-native-tls";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1wkfg6zn85zckmv4im7mv20ca6b1vmlib5xwz9p7g19wjfmpdbmv";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "macros" "rt" "rt-multi-thread" "io-util" "net" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.11";
        edition = "2018";
        sha256 = "1ki3aafl33qyqmahhp4i5da1ig0im2a89cpqr5xwsg270h27fq6n";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "time" ];
      };
      "tokio-util 0.3.1" = rec {
        crateName = "tokio-util";
        version = "0.3.1";
        edition = "2018";
        sha256 = "16b48dl6sbc9x944jgjvsd65ab1w2c2qcziddbrbwv1b3y4l50my";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.1.12";
          }
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 0.2.25";
            features = [ "full" ];
          }
        ];
        features = {
          "codec" = [ "tokio/stream" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "udp" "compat" ];
          "futures-io" = [ "dep:futures-io" ];
          "udp" = [ "tokio/udp" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" ];
      };
      "tokio-util 0.7.7" = rec {
        crateName = "tokio-util";
        version = "0.7.7";
        edition = "2018";
        sha256 = "1cp6yx4789j6gvbp4xnbk7lpd7q0j2a2qd4g1pg2b4q0afadh9sl";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "codec" = [ "tracing" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "tracing" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "tonic" = rec {
        crateName = "tonic";
        version = "0.8.3";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/hyperium/tonic.git";
          rev = "9f716d841184b8521720c6ed941af137ca2ee6a0";
          sha256 = "16ak6ax1ijdflcln78nxvcmpskz7wwxj2i0pvz397mx6nslj63nx";
        };
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64 0.21.0";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2 0.3.15";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.5";
          }
          {
            name = "hyper";
            packageId = "hyper 0.14.24";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost 0.11.6";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            optional = true;
            features = [ "net" "time" "macros" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tower";
            packageId = "tower";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "balance" "buffer" "discover" "limit" "load" "make" "timeout" "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "rt" "macros" ];
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [ "dep:h2" "dep:hyper" "dep:tokio" "dep:tower" "dep:hyper-timeout" ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [ "transport" "codegen" "prost" ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "tls" = [ "dep:rustls-pemfile" "transport" "dep:tokio-rustls" "dep:async-stream" ];
          "tls-roots" = [ "tls-roots-common" "dep:rustls-native-certs" ];
          "tls-roots-common" = [ "tls" ];
          "tls-webpki-roots" = [ "tls-roots-common" "dep:webpki-roots" ];
          "transport" = [ "dep:axum" "channel" ];
        };
        resolvedDefaultFeatures = [ "channel" "codegen" "default" "prost" "transport" ];
      };
      "tonic-build" = rec {
        crateName = "tonic-build";
        version = "0.8.4";
        edition = "2021";
        workspace_member = null;
        src = pkgs.fetchgit {
          url = "https://github.com/hyperium/tonic.git";
          rev = "9f716d841184b8521720c6ed941af137ca2ee6a0";
          sha256 = "16ak6ax1ijdflcln78nxvcmpskz7wwxj2i0pvz397mx6nslj63nx";
        };
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "prettyplease";
            packageId = "prettyplease";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "prost-build";
            packageId = "prost-build";
            optional = true;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
          "cleanup-markdown" = [ "prost-build/cleanup-markdown" ];
          "default" = [ "transport" "prost" ];
          "prost" = [ "prost-build" ];
          "prost-build" = [ "dep:prost-build" ];
        };
        resolvedDefaultFeatures = [ "default" "prost" "prost-build" "transport" ];
      };
      "tower" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util 0.7.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tokio";
            packageId = "tokio 1.25.0";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "rand" "slab" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "__common" "balance" "buffer" "default" "discover" "futures-core" "futures-util" "indexmap" "limit" "load" "log" "make" "pin-project" "pin-project-lite" "rand" "ready-cache" "slab" "timeout" "tokio" "tokio-util" "tracing" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0n6qr26ivwqv19fih5pcjk2nvmys77m964lwkqiyil9dy15h8wzq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body 0.4.5";
          }
          {
            name = "http-range-header";
            packageId = "http-range-header";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tower";
            packageId = "tower";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.4.0";
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "buffer" "util" "retry" "make" "timeout" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" ];
          "compression-br" = [ "async-compression/brotli" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" ];
          "compression-gzip" = [ "async-compression/gzip" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" ];
          "decompression-gzip" = [ "async-compression/gzip" "tokio-util" "tokio" ];
          "follow-redirect" = [ "iri-string" "tower/util" ];
          "fs" = [ "tokio/fs" "tokio-util/io" "tokio/io-util" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "metrics" = [ "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "default" "map-response-body" "tower" "util" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1l7i17k9vlssrdg4s3b0ia5jjkmmxsvv8s9y9ih0jfi8ssz8s362";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0lmfzmmvid2yp2l36mbavhmqgsvzqf7r2wiwz73ml4xmwaf1rg5n";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.37";
        edition = "2018";
        sha256 = "1f2fylc79xmbh7v53kak6qyw27njbx227rd64kb4bga8ilxc7s4c";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite 0.2.9";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "log" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.23";
        edition = "2018";
        sha256 = "06h80cy0i1kilvnj8j9dw2kcfwbwj49n2s3jwskhr1rra7sgh5s0";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.30";
        edition = "2018";
        sha256 = "0fi1jz3jbzk3n7k379pwv3wfhn35c5gcwn000m2xh7xb1sx07sr4";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" "valuable" ];
      };
      "tracing-futures" = rec {
        crateName = "tracing-futures";
        version = "0.2.5";
        edition = "2018";
        sha256 = "1wimg0iwa2ldq7xv98lvivvf3q9ykfminig8r1bs0ig22np9bl4p";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std-future" "std" ];
          "futures" = [ "dep:futures" ];
          "futures-01" = [ "futures_01" "std" ];
          "futures-03" = [ "std-future" "futures" "futures-task" "std" ];
          "futures-task" = [ "dep:futures-task" ];
          "futures_01" = [ "dep:futures_01" ];
          "pin-project" = [ "dep:pin-project" ];
          "std" = [ "tracing/std" ];
          "std-future" = [ "pin-project" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-executor" = [ "dep:tokio-executor" ];
        };
        resolvedDefaultFeatures = [ "pin-project" "std-future" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.1.3";
        edition = "2018";
        sha256 = "08prnkxq8yas6jvvjnvyx5v3hwblas5527wxxgbiw2yis8rsvpbq";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "trace-logger" "std" ];
          "env_logger" = [ "dep:env_logger" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-opentelemetry" = rec {
        crateName = "tracing-opentelemetry";
        version = "0.18.0";
        edition = "2018";
        sha256 = "1pj8mnxkpp4jwkb45jipavdhpdrsa4h901nz689jf4zajmxbisr1";
        authors = [
          "Julian Tescher <julian@tescher.me>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "opentelemetry";
            packageId = "opentelemetry";
            usesDefaultFeatures = false;
            features = [ "trace" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber 0.3.16";
            usesDefaultFeatures = false;
            features = [ "registry" "std" ];
          }
        ];
        features = {
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "tracing-log" "metrics" ];
          "metrics" = [ "opentelemetry/metrics" ];
          "thiserror" = [ "dep:thiserror" ];
          "tracing-log" = [ "dep:tracing-log" ];
        };
        resolvedDefaultFeatures = [ "default" "metrics" "tracing-log" ];
      };
      "tracing-serde" = rec {
        crateName = "tracing-serde";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1qfr0va69djvxqvjrx4vqq7p6myy414lx4w1f6amcn0hfwqj2sxw";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "valuable" = [ "valuable_crate" "valuable-serde" "tracing-core/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
      };
      "tracing-subscriber 0.1.6" = rec {
        crateName = "tracing-subscriber";
        version = "0.1.6";
        edition = "2018";
        sha256 = "0i9fhlyz8mn2znpgmi5bv9y24pwpkkgfxs0rwcf6dl6djmjs2b0r";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "matchers";
            packageId = "matchers 0.0.1";
            optional = true;
          }
          {
            name = "owning_ref";
            packageId = "owning_ref";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.14";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "ansi_term" ];
          "ansi_term" = [ "dep:ansi_term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "env-filter" "smallvec" "fmt" "ansi" "chrono" "tracing-log" ];
          "env-filter" = [ "matchers" "regex" "lazy_static" ];
          "filter" = [ "env-filter" ];
          "fmt" = [ "owning_ref" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "matchers" = [ "dep:matchers" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "smallvec" = [ "dep:smallvec" ];
          "tracing-log" = [ "dep:tracing-log" ];
        };
        resolvedDefaultFeatures = [ "ansi" "ansi_term" "chrono" "default" "env-filter" "fmt" "lazy_static" "matchers" "owning_ref" "regex" "smallvec" "tracing-log" ];
      };
      "tracing-subscriber 0.3.16" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.16";
        edition = "2018";
        sha256 = "0w2sdf97g1ynbmk3j4q6sxmjgaalgf4pg4vl374x0w6x4sp6w5x6";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers 0.1.0";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.12.1";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.10.0";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
          {
            name = "tracing-serde";
            packageId = "tracing-serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "json" "matchers" "nu-ansi-term" "once_cell" "parking_lot" "regex" "registry" "serde" "serde_json" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log" "tracing-serde" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.4";
        edition = "2015";
        sha256 = "1vc15paa4zi06ixsxihwbvfn24d708nsyg1ncgqwcrn42byyqa1m";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.16.0";
        edition = "2018";
        sha256 = "1fhb9iaqyjn4dzn2vl86kxjhp4xpw5gynczlnqzf4x6rjgpn2ya9";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.6";
        edition = "2018";
        sha256 = "1g2fdsw5sv9l1m73whm99za3lxq3nw4gzx5kvi562h4b46gjp8l4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.10";
        edition = "2015";
        sha256 = "12vc3wv0qwg8rzcgb9bhaf5119dlmd6lmkhbfy1zfls6n7jx3vf0";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.4";
        edition = "2015";
        sha256 = "131dfzf7d8fsr1ivch34x42c2d1ik5ig3g78brxncnn0r1sdyqpr";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "want" = rec {
        crateName = "want";
        version = "0.3.0";
        edition = "2018";
        sha256 = "181b2zmwfq389x9n2g1n37cvcvvdand832zz6v8i1l8wrdlaks0w";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.10.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.10.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "07y3l8mzfzzz4cj09c8y90yak4hpsi9g7pllyzpr6xvwrabka50s";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.84";
        edition = "2018";
        sha256 = "0fx5gh0b4n6znfa3blz92wn1k4bbiysyq9m95s7rn3gk46ydry1i";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.84";
        edition = "2018";
        sha256 = "1ffc0wb293ha56i66f830x7f8aa2xql69a21lrasy1ncbgyr1klm";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.84";
        edition = "2018";
        sha256 = "1idlq28awqhq8rclb22rn5xix82w9a4rgy11vkapzhzd1dygf8ac";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.84";
        edition = "2018";
        sha256 = "1xm56lpi0rihh8ny7x085dgs3jdm47spgqflb98wghyadwq83zra";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.84";
        edition = "2018";
        sha256 = "0pcvk1c97r1pprzfaxxn359r0wqg5bm33ylbwgjh8f4cwbvzwih0";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "which" = rec {
        crateName = "which";
        version = "4.4.0";
        edition = "2018";
        sha256 = "0sd24r17q4j3hc2yjjrg9q4qya1y4n9zq0bj9c2rla1bqn2cfh94";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "regex" = [ "dep:regex" ];
        };
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1nyacxk2cbyrmn8vlra4z9ns2818qn178yshkhcd5qqj5r670mvi";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];

      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi 0.3.9" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "activation" "combaseapi" "consoleapi" "errhandlingapi" "fileapi" "handleapi" "ioapiset" "libloaderapi" "minwinbase" "minwindef" "namedpipeapi" "ntdef" "ntstatus" "objbase" "processenv" "profileapi" "roapi" "std" "synchapi" "sysinfoapi" "threadpoollegacyapiset" "timezoneapi" "winbase" "wincon" "winerror" "winnt" "winsock2" "winstring" "ws2def" "ws2ipdef" "ws2tcpip" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0y71bp7f6d536czj40dhqk0d55wfbbwqfp2ymqf1an5ibgl6rv3h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.9";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-sys 0.42.0" = rec {
        crateName = "windows-sys";
        version = "0.42.0";
        edition = "2018";
        sha256 = "19waf8aryvyq9pzk0gamgfwjycgzk4gnrazpfvv171cby0h1hgjs";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-msvc");
          }
        ];
        features = {
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_UI_Xaml" = [ "Win32_UI" ];
          "Win32_UI_Xaml_Diagnostics" = [ "Win32_UI_Xaml" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-targets" = rec {
        crateName = "windows-targets";
        version = "0.42.1";
        edition = "2018";
        sha256 = "1rwh2d1yvfjvlfidi8p9ha4lp34lb0lynynlhk65ikdz3x4j49cf";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows_aarch64_gnullvm" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.1";
        edition = "2018";
        sha256 = "0256d14kqpiniwcm6y2yfj7jbzdvvj4l6i65r5zyrza36bl6964c";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.1";
        edition = "2018";
        sha256 = "1iy6adiaz2956f0kcl2wfdjx49ayv2lp11glkxxc85pw7xkip2sc";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.1";
        edition = "2018";
        sha256 = "0h6n8mqjfq1rk4vpr9gz8md1b8f7bqksiymivdxvlc6mi998ff6y";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.1";
        edition = "2018";
        sha256 = "01966w2707qrw183lqg62i1as614i88m5a0s6pzxdpby64i12kdz";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.1";
        edition = "2018";
        sha256 = "0icwd66wd6p9hhzds93333wy2knlqbyiynf2rfy7xqc528i0y161";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.1";
        edition = "2018";
        sha256 = "0qq41m3zkakkmch9x4x30lgv0sy3zh4jpdpxch6jp8ns6brgv2v2";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.1";
        edition = "2018";
        sha256 = "1zfgzsmc0j5p9yx25j15lb1yh45mazl4hhjdvfqqhcm16snn0xj4";
        authors = [
          "Microsoft"
        ];

      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];

      };
      "yaml-rust" = rec {
        crateName = "yaml-rust";
        version = "0.4.5";
        edition = "2018";
        sha256 = "118wbqrr4n6wgk5rjjnlrdlahawlxc1bdsx146mwk8f79in97han";
        authors = [
          "Yuheng Chen <yuhengchen@sensetime.com>"
        ];
        dependencies = [
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os =
      if stdenv.hostPlatform.isDarwin
      then "macos"
      else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      } ''
      echo tested by ${test}
      ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
    '';

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = target // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };
            dependenciesWithRenames =
              lib.filter (d: d ? "rename")
                (
                  filterEnabledDependenciesForThis
                    (
                      (crateConfig.buildDependencies or [ ])
                      ++ (crateConfig.dependencies or [ ])
                      ++ devDependencies
                    )
                );
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; version = package.version; };
              in
              lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    (rename == null && feature == name)
    || (rename != null && rename == feature)
    || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled then [ dependency.name ] else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
        builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

